// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups_amazon.proto

#include "ups_amazon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AProduct::AProduct(
    ::_pbi::ConstantInitialized)
  : description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(int64_t{0})
  , count_(0){}
struct AProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AProductDefaultTypeInternal() {}
  union {
    AProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AProductDefaultTypeInternal _AProduct_default_instance_;
PROTOBUF_CONSTEXPR UAinitWorld::UAinitWorld(
    ::_pbi::ConstantInitialized)
  : worldid_(int64_t{0}){}
struct UAinitWorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAinitWorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAinitWorldDefaultTypeInternal() {}
  union {
    UAinitWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAinitWorldDefaultTypeInternal _UAinitWorld_default_instance_;
PROTOBUF_CONSTEXPR AUconnectedWorld::AUconnectedWorld(
    ::_pbi::ConstantInitialized)
  : success_(false){}
struct AUconnectedWorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUconnectedWorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUconnectedWorldDefaultTypeInternal() {}
  union {
    AUconnectedWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUconnectedWorldDefaultTypeInternal _AUconnectedWorld_default_instance_;
PROTOBUF_CONSTEXPR AUbindUPS::AUbindUPS(
    ::_pbi::ConstantInitialized)
  : ownerid_(0)
  , upsid_(0)
  , seqnum_(int64_t{0}){}
struct AUbindUPSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUbindUPSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUbindUPSDefaultTypeInternal() {}
  union {
    AUbindUPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUbindUPSDefaultTypeInternal _AUbindUPS_default_instance_;
PROTOBUF_CONSTEXPR UAbindUPSResponse::UAbindUPSResponse(
    ::_pbi::ConstantInitialized)
  : status_(false)
  , ownerid_(0)
  , seqnum_(int64_t{0})
  , upsid_(0){}
struct UAbindUPSResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAbindUPSResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAbindUPSResponseDefaultTypeInternal() {}
  union {
    UAbindUPSResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAbindUPSResponseDefaultTypeInternal _UAbindUPSResponse_default_instance_;
PROTOBUF_CONSTEXPR AUreqPickup::AUreqPickup(
    ::_pbi::ConstantInitialized)
  : products_()
  , whid_(0)
  , destinationx_(0)
  , shipid_(int64_t{0})
  , destinationy_(0)
  , upsid_(0)
  , seqnum_(int64_t{0}){}
struct AUreqPickupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUreqPickupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUreqPickupDefaultTypeInternal() {}
  union {
    AUreqPickup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUreqPickupDefaultTypeInternal _AUreqPickup_default_instance_;
PROTOBUF_CONSTEXPR UAtruckArrived::UAtruckArrived(
    ::_pbi::ConstantInitialized)
  : shipid_(int64_t{0})
  , whid_(0)
  , truckid_(0)
  , seqnum_(int64_t{0}){}
struct UAtruckArrivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAtruckArrivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAtruckArrivedDefaultTypeInternal() {}
  union {
    UAtruckArrived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAtruckArrivedDefaultTypeInternal _UAtruckArrived_default_instance_;
PROTOBUF_CONSTEXPR AUreqDelivery::AUreqDelivery(
    ::_pbi::ConstantInitialized)
  : shipid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct AUreqDeliveryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUreqDeliveryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUreqDeliveryDefaultTypeInternal() {}
  union {
    AUreqDelivery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUreqDeliveryDefaultTypeInternal _AUreqDelivery_default_instance_;
PROTOBUF_CONSTEXPR UAdelivered::UAdelivered(
    ::_pbi::ConstantInitialized)
  : shipid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UAdeliveredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAdeliveredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAdeliveredDefaultTypeInternal() {}
  union {
    UAdelivered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAdeliveredDefaultTypeInternal _UAdelivered_default_instance_;
PROTOBUF_CONSTEXPR AUchangeDestn::AUchangeDestn(
    ::_pbi::ConstantInitialized)
  : shipid_(int64_t{0})
  , destinationx_(0)
  , destinationy_(0)
  , seqnum_(int64_t{0}){}
struct AUchangeDestnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUchangeDestnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUchangeDestnDefaultTypeInternal() {}
  union {
    AUchangeDestn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUchangeDestnDefaultTypeInternal _AUchangeDestn_default_instance_;
PROTOBUF_CONSTEXPR UAchangeResp::UAchangeResp(
    ::_pbi::ConstantInitialized)
  : acks_(int64_t{0})
  , success_(false){}
struct UAchangeRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAchangeRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAchangeRespDefaultTypeInternal() {}
  union {
    UAchangeResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAchangeRespDefaultTypeInternal _UAchangeResp_default_instance_;
PROTOBUF_CONSTEXPR Err::Err(
    ::_pbi::ConstantInitialized)
  : err_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originseqnum_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct ErrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrDefaultTypeInternal() {}
  union {
    Err _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrDefaultTypeInternal _Err_default_instance_;
PROTOBUF_CONSTEXPR UAcommands::UAcommands(
    ::_pbi::ConstantInitialized)
  : truckarr_()
  , delivered_()
  , changeresp_()
  , bindupsresponse_()
  , err_()
  , acks_()
  , disconnect_(false){}
struct UAcommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAcommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAcommandsDefaultTypeInternal() {}
  union {
    UAcommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAcommandsDefaultTypeInternal _UAcommands_default_instance_;
PROTOBUF_CONSTEXPR AUcommands::AUcommands(
    ::_pbi::ConstantInitialized)
  : pickup_()
  , delivery_()
  , changedest_()
  , bindups_()
  , err_()
  , acks_()
  , disconnect_(false){}
struct AUcommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUcommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUcommandsDefaultTypeInternal() {}
  union {
    AUcommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUcommandsDefaultTypeInternal _AUcommands_default_instance_;
static ::_pb::Metadata file_level_metadata_ups_5famazon_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ups_5famazon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ups_5famazon_2eproto = nullptr;

const uint32_t TableStruct_ups_5famazon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AProduct, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AProduct, id_),
  PROTOBUF_FIELD_OFFSET(::AProduct, description_),
  PROTOBUF_FIELD_OFFSET(::AProduct, count_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::UAinitWorld, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAinitWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAinitWorld, worldid_),
  0,
  PROTOBUF_FIELD_OFFSET(::AUconnectedWorld, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUconnectedWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUconnectedWorld, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::AUbindUPS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUbindUPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUbindUPS, ownerid_),
  PROTOBUF_FIELD_OFFSET(::AUbindUPS, upsid_),
  PROTOBUF_FIELD_OFFSET(::AUbindUPS, seqnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::UAbindUPSResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAbindUPSResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAbindUPSResponse, status_),
  PROTOBUF_FIELD_OFFSET(::UAbindUPSResponse, ownerid_),
  PROTOBUF_FIELD_OFFSET(::UAbindUPSResponse, upsid_),
  PROTOBUF_FIELD_OFFSET(::UAbindUPSResponse, seqnum_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, whid_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, destinationx_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, destinationy_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, shipid_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, upsid_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, products_),
  PROTOBUF_FIELD_OFFSET(::AUreqPickup, seqnum_),
  0,
  1,
  3,
  2,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::UAtruckArrived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAtruckArrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAtruckArrived, whid_),
  PROTOBUF_FIELD_OFFSET(::UAtruckArrived, shipid_),
  PROTOBUF_FIELD_OFFSET(::UAtruckArrived, truckid_),
  PROTOBUF_FIELD_OFFSET(::UAtruckArrived, seqnum_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::AUreqDelivery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUreqDelivery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUreqDelivery, shipid_),
  PROTOBUF_FIELD_OFFSET(::AUreqDelivery, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UAdelivered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAdelivered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAdelivered, shipid_),
  PROTOBUF_FIELD_OFFSET(::UAdelivered, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AUchangeDestn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUchangeDestn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUchangeDestn, shipid_),
  PROTOBUF_FIELD_OFFSET(::AUchangeDestn, destinationx_),
  PROTOBUF_FIELD_OFFSET(::AUchangeDestn, destinationy_),
  PROTOBUF_FIELD_OFFSET(::AUchangeDestn, seqnum_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::UAchangeResp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAchangeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAchangeResp, success_),
  PROTOBUF_FIELD_OFFSET(::UAchangeResp, acks_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Err, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Err, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Err, err_),
  PROTOBUF_FIELD_OFFSET(::Err, originseqnum_),
  PROTOBUF_FIELD_OFFSET(::Err, seqnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::UAcommands, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAcommands, truckarr_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, delivered_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, changeresp_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, bindupsresponse_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, err_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, disconnect_),
  PROTOBUF_FIELD_OFFSET(::UAcommands, acks_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::AUcommands, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUcommands, pickup_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, delivery_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, changedest_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, bindups_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, err_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, disconnect_),
  PROTOBUF_FIELD_OFFSET(::AUcommands, acks_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::AProduct)},
  { 12, 19, -1, sizeof(::UAinitWorld)},
  { 20, 27, -1, sizeof(::AUconnectedWorld)},
  { 28, 37, -1, sizeof(::AUbindUPS)},
  { 40, 50, -1, sizeof(::UAbindUPSResponse)},
  { 54, 67, -1, sizeof(::AUreqPickup)},
  { 74, 84, -1, sizeof(::UAtruckArrived)},
  { 88, 96, -1, sizeof(::AUreqDelivery)},
  { 98, 106, -1, sizeof(::UAdelivered)},
  { 108, 118, -1, sizeof(::AUchangeDestn)},
  { 122, 130, -1, sizeof(::UAchangeResp)},
  { 132, 141, -1, sizeof(::Err)},
  { 144, 157, -1, sizeof(::UAcommands)},
  { 164, 177, -1, sizeof(::AUcommands)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AProduct_default_instance_._instance,
  &::_UAinitWorld_default_instance_._instance,
  &::_AUconnectedWorld_default_instance_._instance,
  &::_AUbindUPS_default_instance_._instance,
  &::_UAbindUPSResponse_default_instance_._instance,
  &::_AUreqPickup_default_instance_._instance,
  &::_UAtruckArrived_default_instance_._instance,
  &::_AUreqDelivery_default_instance_._instance,
  &::_UAdelivered_default_instance_._instance,
  &::_AUchangeDestn_default_instance_._instance,
  &::_UAchangeResp_default_instance_._instance,
  &::_Err_default_instance_._instance,
  &::_UAcommands_default_instance_._instance,
  &::_AUcommands_default_instance_._instance,
};

const char descriptor_table_protodef_ups_5famazon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ups_amazon.proto\":\n\010AProduct\022\n\n\002id\030\001 \002"
  "(\003\022\023\n\013description\030\002 \002(\t\022\r\n\005count\030\003 \002(\005\"\036"
  "\n\013UAinitWorld\022\017\n\007worldID\030\001 \002(\003\"#\n\020AUconn"
  "ectedWorld\022\017\n\007success\030\001 \002(\010\";\n\tAUbindUPS"
  "\022\017\n\007ownerID\030\001 \002(\005\022\r\n\005upsID\030\002 \002(\005\022\016\n\006seqN"
  "um\030\003 \002(\003\"S\n\021UAbindUPSResponse\022\016\n\006status\030"
  "\001 \002(\010\022\017\n\007ownerID\030\002 \002(\005\022\r\n\005upsID\030\003 \002(\005\022\016\n"
  "\006seqNum\030\004 \002(\003\"\223\001\n\013AUreqPickup\022\014\n\004whID\030\001 "
  "\002(\005\022\024\n\014destinationX\030\002 \002(\005\022\024\n\014destination"
  "Y\030\003 \002(\005\022\016\n\006shipID\030\004 \002(\003\022\r\n\005upsID\030\005 \001(\005\022\033"
  "\n\010products\030\006 \003(\0132\t.AProduct\022\016\n\006seqNum\030\007 "
  "\002(\003\"O\n\016UAtruckArrived\022\014\n\004whID\030\001 \002(\005\022\016\n\006s"
  "hipID\030\002 \002(\003\022\017\n\007truckID\030\003 \002(\005\022\016\n\006seqNum\030\004"
  " \002(\003\"/\n\rAUreqDelivery\022\016\n\006shipID\030\001 \002(\003\022\016\n"
  "\006seqNum\030\002 \002(\003\"-\n\013UAdelivered\022\016\n\006shipID\030\001"
  " \002(\003\022\016\n\006seqNum\030\002 \002(\003\"[\n\rAUchangeDestn\022\016\n"
  "\006shipID\030\001 \002(\003\022\024\n\014destinationX\030\002 \002(\005\022\024\n\014d"
  "estinationY\030\003 \002(\005\022\016\n\006seqNum\030\004 \002(\003\"-\n\014UAc"
  "hangeResp\022\017\n\007success\030\001 \002(\010\022\014\n\004acks\030\002 \002(\003"
  "\"8\n\003Err\022\013\n\003err\030\001 \002(\t\022\024\n\014originseqnum\030\002 \002"
  "(\003\022\016\n\006seqnum\030\003 \002(\003\"\325\001\n\nUAcommands\022!\n\010tru"
  "ckArr\030\001 \003(\0132\017.UAtruckArrived\022\037\n\tdelivere"
  "d\030\002 \003(\0132\014.UAdelivered\022!\n\nchangeResp\030\003 \003("
  "\0132\r.UAchangeResp\022+\n\017bindUPSResponse\030\004 \003("
  "\0132\022.UAbindUPSResponse\022\021\n\003err\030\005 \003(\0132\004.Err"
  "\022\022\n\ndisconnect\030\006 \001(\010\022\014\n\004acks\030\007 \003(\003\"\302\001\n\nA"
  "Ucommands\022\034\n\006pickup\030\001 \003(\0132\014.AUreqPickup\022"
  " \n\010delivery\030\002 \003(\0132\016.AUreqDelivery\022\"\n\ncha"
  "ngeDest\030\003 \003(\0132\016.AUchangeDestn\022\033\n\007bindUPS"
  "\030\004 \003(\0132\n.AUbindUPS\022\021\n\003err\030\005 \003(\0132\004.Err\022\022\n"
  "\ndisconnect\030\006 \001(\010\022\014\n\004acks\030\007 \003(\003"
  ;
static ::_pbi::once_flag descriptor_table_ups_5famazon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ups_5famazon_2eproto = {
    false, false, 1231, descriptor_table_protodef_ups_5famazon_2eproto,
    "ups_amazon.proto",
    &descriptor_table_ups_5famazon_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_ups_5famazon_2eproto::offsets,
    file_level_metadata_ups_5famazon_2eproto, file_level_enum_descriptors_ups_5famazon_2eproto,
    file_level_service_descriptors_ups_5famazon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ups_5famazon_2eproto_getter() {
  return &descriptor_table_ups_5famazon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ups_5famazon_2eproto(&descriptor_table_ups_5famazon_2eproto);

// ===================================================================

class AProduct::_Internal {
 public:
  using HasBits = decltype(std::declval<AProduct>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AProduct::AProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AProduct)
}
AProduct::AProduct(const AProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:AProduct)
}

inline void AProduct::SharedCtor() {
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

AProduct::~AProduct() {
  // @@protoc_insertion_point(destructor:AProduct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.Destroy();
}

void AProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:AProduct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AProduct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AProduct.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AProduct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AProduct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AProduct.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // required int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AProduct)
  return target;
}

size_t AProduct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AProduct)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_id()) {
    // required int64 id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  if (_internal_has_count()) {
    // required int32 count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t AProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AProduct)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required int64 id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());

    // required int32 count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AProduct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AProduct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AProduct::GetClassData() const { return &_class_data_; }

void AProduct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AProduct *>(to)->MergeFrom(
      static_cast<const AProduct &>(from));
}


void AProduct::MergeFrom(const AProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AProduct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AProduct::CopyFrom(const AProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AProduct::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AProduct::InternalSwap(AProduct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AProduct, count_)
      + sizeof(AProduct::count_)
      - PROTOBUF_FIELD_OFFSET(AProduct, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AProduct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[0]);
}

// ===================================================================

class UAinitWorld::_Internal {
 public:
  using HasBits = decltype(std::declval<UAinitWorld>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UAinitWorld::UAinitWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAinitWorld)
}
UAinitWorld::UAinitWorld(const UAinitWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:UAinitWorld)
}

inline void UAinitWorld::SharedCtor() {
worldid_ = int64_t{0};
}

UAinitWorld::~UAinitWorld() {
  // @@protoc_insertion_point(destructor:UAinitWorld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAinitWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAinitWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAinitWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:UAinitWorld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAinitWorld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAinitWorld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAinitWorld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAinitWorld)
  return target;
}

size_t UAinitWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAinitWorld)
  size_t total_size = 0;

  // required int64 worldID = 1;
  if (_internal_has_worldid()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAinitWorld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAinitWorld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAinitWorld::GetClassData() const { return &_class_data_; }

void UAinitWorld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAinitWorld *>(to)->MergeFrom(
      static_cast<const UAinitWorld &>(from));
}


void UAinitWorld::MergeFrom(const UAinitWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAinitWorld)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldid()) {
    _internal_set_worldid(from._internal_worldid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAinitWorld::CopyFrom(const UAinitWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAinitWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAinitWorld::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAinitWorld::InternalSwap(UAinitWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAinitWorld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[1]);
}

// ===================================================================

class AUconnectedWorld::_Internal {
 public:
  using HasBits = decltype(std::declval<AUconnectedWorld>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AUconnectedWorld::AUconnectedWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUconnectedWorld)
}
AUconnectedWorld::AUconnectedWorld(const AUconnectedWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:AUconnectedWorld)
}

inline void AUconnectedWorld::SharedCtor() {
success_ = false;
}

AUconnectedWorld::~AUconnectedWorld() {
  // @@protoc_insertion_point(destructor:AUconnectedWorld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUconnectedWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUconnectedWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUconnectedWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:AUconnectedWorld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUconnectedWorld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUconnectedWorld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUconnectedWorld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUconnectedWorld)
  return target;
}

size_t AUconnectedWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUconnectedWorld)
  size_t total_size = 0;

  // required bool success = 1;
  if (_internal_has_success()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUconnectedWorld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUconnectedWorld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUconnectedWorld::GetClassData() const { return &_class_data_; }

void AUconnectedWorld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUconnectedWorld *>(to)->MergeFrom(
      static_cast<const AUconnectedWorld &>(from));
}


void AUconnectedWorld::MergeFrom(const AUconnectedWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUconnectedWorld)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUconnectedWorld::CopyFrom(const AUconnectedWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUconnectedWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUconnectedWorld::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUconnectedWorld::InternalSwap(AUconnectedWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUconnectedWorld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[2]);
}

// ===================================================================

class AUbindUPS::_Internal {
 public:
  using HasBits = decltype(std::declval<AUbindUPS>()._has_bits_);
  static void set_has_ownerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upsid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AUbindUPS::AUbindUPS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUbindUPS)
}
AUbindUPS::AUbindUPS(const AUbindUPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ownerid_, &from.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&ownerid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AUbindUPS)
}

inline void AUbindUPS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ownerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&ownerid_)) + sizeof(seqnum_));
}

AUbindUPS::~AUbindUPS() {
  // @@protoc_insertion_point(destructor:AUbindUPS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUbindUPS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUbindUPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUbindUPS::Clear() {
// @@protoc_insertion_point(message_clear_start:AUbindUPS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ownerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&ownerid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUbindUPS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 ownerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ownerid(&has_bits);
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 upsID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_upsid(&has_bits);
          upsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUbindUPS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUbindUPS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ownerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ownerid(), target);
  }

  // required int32 upsID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_upsid(), target);
  }

  // required int64 seqNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUbindUPS)
  return target;
}

size_t AUbindUPS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUbindUPS)
  size_t total_size = 0;

  if (_internal_has_ownerid()) {
    // required int32 ownerID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ownerid());
  }

  if (_internal_has_upsid()) {
    // required int32 upsID = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upsid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AUbindUPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUbindUPS)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 ownerID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ownerid());

    // required int32 upsID = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upsid());

    // required int64 seqNum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUbindUPS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUbindUPS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUbindUPS::GetClassData() const { return &_class_data_; }

void AUbindUPS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUbindUPS *>(to)->MergeFrom(
      static_cast<const AUbindUPS &>(from));
}


void AUbindUPS::MergeFrom(const AUbindUPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUbindUPS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      upsid_ = from.upsid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUbindUPS::CopyFrom(const AUbindUPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUbindUPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUbindUPS::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUbindUPS::InternalSwap(AUbindUPS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUbindUPS, seqnum_)
      + sizeof(AUbindUPS::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AUbindUPS, ownerid_)>(
          reinterpret_cast<char*>(&ownerid_),
          reinterpret_cast<char*>(&other->ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUbindUPS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[3]);
}

// ===================================================================

class UAbindUPSResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UAbindUPSResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ownerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upsid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

UAbindUPSResponse::UAbindUPSResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAbindUPSResponse)
}
UAbindUPSResponse::UAbindUPSResponse(const UAbindUPSResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&upsid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(upsid_));
  // @@protoc_insertion_point(copy_constructor:UAbindUPSResponse)
}

inline void UAbindUPSResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upsid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(upsid_));
}

UAbindUPSResponse::~UAbindUPSResponse() {
  // @@protoc_insertion_point(destructor:UAbindUPSResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAbindUPSResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAbindUPSResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAbindUPSResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UAbindUPSResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upsid_) -
        reinterpret_cast<char*>(&status_)) + sizeof(upsid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAbindUPSResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ownerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ownerid(&has_bits);
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 upsID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upsid(&has_bits);
          upsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAbindUPSResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAbindUPSResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // required int32 ownerID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ownerid(), target);
  }

  // required int32 upsID = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_upsid(), target);
  }

  // required int64 seqNum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAbindUPSResponse)
  return target;
}

size_t UAbindUPSResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAbindUPSResponse)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required bool status = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_ownerid()) {
    // required int32 ownerID = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ownerid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_upsid()) {
    // required int32 upsID = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upsid());
  }

  return total_size;
}
size_t UAbindUPSResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAbindUPSResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool status = 1;
    total_size += 1 + 1;

    // required int32 ownerID = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ownerid());

    // required int64 seqNum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 upsID = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAbindUPSResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAbindUPSResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAbindUPSResponse::GetClassData() const { return &_class_data_; }

void UAbindUPSResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAbindUPSResponse *>(to)->MergeFrom(
      static_cast<const UAbindUPSResponse &>(from));
}


void UAbindUPSResponse::MergeFrom(const UAbindUPSResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAbindUPSResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      upsid_ = from.upsid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAbindUPSResponse::CopyFrom(const UAbindUPSResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAbindUPSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAbindUPSResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAbindUPSResponse::InternalSwap(UAbindUPSResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAbindUPSResponse, upsid_)
      + sizeof(UAbindUPSResponse::upsid_)
      - PROTOBUF_FIELD_OFFSET(UAbindUPSResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAbindUPSResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[4]);
}

// ===================================================================

class AUreqPickup::_Internal {
 public:
  using HasBits = decltype(std::declval<AUreqPickup>()._has_bits_);
  static void set_has_whid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destinationx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destinationy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upsid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000002f) ^ 0x0000002f) != 0;
  }
};

AUreqPickup::AUreqPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  products_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUreqPickup)
}
AUreqPickup::AUreqPickup(const AUreqPickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      products_(from.products_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&whid_, &from.whid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&whid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AUreqPickup)
}

inline void AUreqPickup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&whid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&whid_)) + sizeof(seqnum_));
}

AUreqPickup::~AUreqPickup() {
  // @@protoc_insertion_point(destructor:AUreqPickup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUreqPickup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUreqPickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUreqPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:AUreqPickup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  products_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&whid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&whid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUreqPickup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 whID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_whid(&has_bits);
          whid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destinationX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destinationx(&has_bits);
          destinationx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destinationY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_destinationy(&has_bits);
          destinationy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 shipID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 upsID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_upsid(&has_bits);
          upsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AProduct products = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUreqPickup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUreqPickup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 whID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_whid(), target);
  }

  // required int32 destinationX = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destinationx(), target);
  }

  // required int32 destinationY = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_destinationy(), target);
  }

  // required int64 shipID = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_shipid(), target);
  }

  // optional int32 upsID = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_upsid(), target);
  }

  // repeated .AProduct products = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_products_size()); i < n; i++) {
    const auto& repfield = this->_internal_products(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required int64 seqNum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUreqPickup)
  return target;
}

size_t AUreqPickup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUreqPickup)
  size_t total_size = 0;

  if (_internal_has_whid()) {
    // required int32 whID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());
  }

  if (_internal_has_destinationx()) {
    // required int32 destinationX = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationx());
  }

  if (_internal_has_shipid()) {
    // required int64 shipID = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_destinationy()) {
    // required int32 destinationY = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationy());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AUreqPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUreqPickup)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required int32 whID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());

    // required int32 destinationX = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationx());

    // required int64 shipID = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int32 destinationY = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationy());

    // required int64 seqNum = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AProduct products = 6;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->products_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 upsID = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upsid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUreqPickup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUreqPickup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUreqPickup::GetClassData() const { return &_class_data_; }

void AUreqPickup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUreqPickup *>(to)->MergeFrom(
      static_cast<const AUreqPickup &>(from));
}


void AUreqPickup::MergeFrom(const AUreqPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUreqPickup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  products_.MergeFrom(from.products_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      whid_ = from.whid_;
    }
    if (cached_has_bits & 0x00000002u) {
      destinationx_ = from.destinationx_;
    }
    if (cached_has_bits & 0x00000004u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000008u) {
      destinationy_ = from.destinationy_;
    }
    if (cached_has_bits & 0x00000010u) {
      upsid_ = from.upsid_;
    }
    if (cached_has_bits & 0x00000020u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUreqPickup::CopyFrom(const AUreqPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUreqPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUreqPickup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(products_))
    return false;
  return true;
}

void AUreqPickup::InternalSwap(AUreqPickup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  products_.InternalSwap(&other->products_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUreqPickup, seqnum_)
      + sizeof(AUreqPickup::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AUreqPickup, whid_)>(
          reinterpret_cast<char*>(&whid_),
          reinterpret_cast<char*>(&other->whid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUreqPickup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[5]);
}

// ===================================================================

class UAtruckArrived::_Internal {
 public:
  using HasBits = decltype(std::declval<UAtruckArrived>()._has_bits_);
  static void set_has_whid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

UAtruckArrived::UAtruckArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAtruckArrived)
}
UAtruckArrived::UAtruckArrived(const UAtruckArrived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UAtruckArrived)
}

inline void UAtruckArrived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

UAtruckArrived::~UAtruckArrived() {
  // @@protoc_insertion_point(destructor:UAtruckArrived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAtruckArrived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAtruckArrived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAtruckArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:UAtruckArrived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAtruckArrived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 whID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_whid(&has_bits);
          whid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 shipID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 truckID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAtruckArrived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAtruckArrived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 whID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_whid(), target);
  }

  // required int64 shipID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_shipid(), target);
  }

  // required int32 truckID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_truckid(), target);
  }

  // required int64 seqNum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAtruckArrived)
  return target;
}

size_t UAtruckArrived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAtruckArrived)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipID = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_whid()) {
    // required int32 whID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());
  }

  if (_internal_has_truckid()) {
    // required int32 truckID = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UAtruckArrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAtruckArrived)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 shipID = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int32 whID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whid());

    // required int32 truckID = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

    // required int64 seqNum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAtruckArrived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAtruckArrived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAtruckArrived::GetClassData() const { return &_class_data_; }

void UAtruckArrived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAtruckArrived *>(to)->MergeFrom(
      static_cast<const UAtruckArrived &>(from));
}


void UAtruckArrived::MergeFrom(const UAtruckArrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAtruckArrived)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      whid_ = from.whid_;
    }
    if (cached_has_bits & 0x00000004u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAtruckArrived::CopyFrom(const UAtruckArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAtruckArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAtruckArrived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAtruckArrived::InternalSwap(UAtruckArrived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAtruckArrived, seqnum_)
      + sizeof(UAtruckArrived::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UAtruckArrived, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAtruckArrived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[6]);
}

// ===================================================================

class AUreqDelivery::_Internal {
 public:
  using HasBits = decltype(std::declval<AUreqDelivery>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AUreqDelivery::AUreqDelivery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUreqDelivery)
}
AUreqDelivery::AUreqDelivery(const AUreqDelivery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AUreqDelivery)
}

inline void AUreqDelivery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

AUreqDelivery::~AUreqDelivery() {
  // @@protoc_insertion_point(destructor:AUreqDelivery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUreqDelivery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUreqDelivery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUreqDelivery::Clear() {
// @@protoc_insertion_point(message_clear_start:AUreqDelivery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUreqDelivery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUreqDelivery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUreqDelivery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int64 seqNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUreqDelivery)
  return target;
}

size_t AUreqDelivery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUreqDelivery)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AUreqDelivery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUreqDelivery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int64 seqNum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUreqDelivery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUreqDelivery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUreqDelivery::GetClassData() const { return &_class_data_; }

void AUreqDelivery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUreqDelivery *>(to)->MergeFrom(
      static_cast<const AUreqDelivery &>(from));
}


void AUreqDelivery::MergeFrom(const AUreqDelivery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUreqDelivery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUreqDelivery::CopyFrom(const AUreqDelivery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUreqDelivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUreqDelivery::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUreqDelivery::InternalSwap(AUreqDelivery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUreqDelivery, seqnum_)
      + sizeof(AUreqDelivery::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AUreqDelivery, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUreqDelivery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[7]);
}

// ===================================================================

class UAdelivered::_Internal {
 public:
  using HasBits = decltype(std::declval<UAdelivered>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UAdelivered::UAdelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAdelivered)
}
UAdelivered::UAdelivered(const UAdelivered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UAdelivered)
}

inline void UAdelivered::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

UAdelivered::~UAdelivered() {
  // @@protoc_insertion_point(destructor:UAdelivered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAdelivered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAdelivered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAdelivered::Clear() {
// @@protoc_insertion_point(message_clear_start:UAdelivered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAdelivered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAdelivered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAdelivered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int64 seqNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAdelivered)
  return target;
}

size_t UAdelivered::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAdelivered)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UAdelivered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAdelivered)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int64 seqNum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAdelivered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAdelivered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAdelivered::GetClassData() const { return &_class_data_; }

void UAdelivered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAdelivered *>(to)->MergeFrom(
      static_cast<const UAdelivered &>(from));
}


void UAdelivered::MergeFrom(const UAdelivered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAdelivered)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAdelivered::CopyFrom(const UAdelivered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAdelivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAdelivered::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAdelivered::InternalSwap(UAdelivered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAdelivered, seqnum_)
      + sizeof(UAdelivered::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UAdelivered, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAdelivered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[8]);
}

// ===================================================================

class AUchangeDestn::_Internal {
 public:
  using HasBits = decltype(std::declval<AUchangeDestn>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destinationx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destinationy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

AUchangeDestn::AUchangeDestn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUchangeDestn)
}
AUchangeDestn::AUchangeDestn(const AUchangeDestn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AUchangeDestn)
}

inline void AUchangeDestn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

AUchangeDestn::~AUchangeDestn() {
  // @@protoc_insertion_point(destructor:AUchangeDestn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUchangeDestn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUchangeDestn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUchangeDestn::Clear() {
// @@protoc_insertion_point(message_clear_start:AUchangeDestn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUchangeDestn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destinationX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destinationx(&has_bits);
          destinationx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destinationY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_destinationy(&has_bits);
          destinationy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUchangeDestn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUchangeDestn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int32 destinationX = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destinationx(), target);
  }

  // required int32 destinationY = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_destinationy(), target);
  }

  // required int64 seqNum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUchangeDestn)
  return target;
}

size_t AUchangeDestn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUchangeDestn)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());
  }

  if (_internal_has_destinationx()) {
    // required int32 destinationX = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationx());
  }

  if (_internal_has_destinationy()) {
    // required int32 destinationY = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationy());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AUchangeDestn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUchangeDestn)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 shipID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shipid());

    // required int32 destinationX = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationx());

    // required int32 destinationY = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationy());

    // required int64 seqNum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUchangeDestn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUchangeDestn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUchangeDestn::GetClassData() const { return &_class_data_; }

void AUchangeDestn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUchangeDestn *>(to)->MergeFrom(
      static_cast<const AUchangeDestn &>(from));
}


void AUchangeDestn::MergeFrom(const AUchangeDestn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUchangeDestn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      destinationx_ = from.destinationx_;
    }
    if (cached_has_bits & 0x00000004u) {
      destinationy_ = from.destinationy_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUchangeDestn::CopyFrom(const AUchangeDestn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUchangeDestn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUchangeDestn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUchangeDestn::InternalSwap(AUchangeDestn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUchangeDestn, seqnum_)
      + sizeof(AUchangeDestn::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AUchangeDestn, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUchangeDestn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[9]);
}

// ===================================================================

class UAchangeResp::_Internal {
 public:
  using HasBits = decltype(std::declval<UAchangeResp>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UAchangeResp::UAchangeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAchangeResp)
}
UAchangeResp::UAchangeResp(const UAchangeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acks_, &from.acks_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&acks_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:UAchangeResp)
}

inline void UAchangeResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&acks_)) + sizeof(success_));
}

UAchangeResp::~UAchangeResp() {
  // @@protoc_insertion_point(destructor:UAchangeResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAchangeResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAchangeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAchangeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:UAchangeResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&acks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&acks_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAchangeResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 acks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_acks(&has_bits);
          acks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAchangeResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAchangeResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // required int64 acks = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_acks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAchangeResp)
  return target;
}

size_t UAchangeResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAchangeResp)
  size_t total_size = 0;

  if (_internal_has_acks()) {
    // required int64 acks = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_acks());
  }

  if (_internal_has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UAchangeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAchangeResp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 acks = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_acks());

    // required bool success = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAchangeResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAchangeResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAchangeResp::GetClassData() const { return &_class_data_; }

void UAchangeResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAchangeResp *>(to)->MergeFrom(
      static_cast<const UAchangeResp &>(from));
}


void UAchangeResp::MergeFrom(const UAchangeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAchangeResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      acks_ = from.acks_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAchangeResp::CopyFrom(const UAchangeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAchangeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAchangeResp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UAchangeResp::InternalSwap(UAchangeResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAchangeResp, success_)
      + sizeof(UAchangeResp::success_)
      - PROTOBUF_FIELD_OFFSET(UAchangeResp, acks_)>(
          reinterpret_cast<char*>(&acks_),
          reinterpret_cast<char*>(&other->acks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAchangeResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[10]);
}

// ===================================================================

class Err::_Internal {
 public:
  using HasBits = decltype(std::declval<Err>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_originseqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Err::Err(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Err)
}
Err::Err(const Err& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_err()) {
    err_.Set(from._internal_err(), 
      GetArenaForAllocation());
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:Err)
}

inline void Err::SharedCtor() {
err_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&originseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

Err::~Err() {
  // @@protoc_insertion_point(destructor:Err)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Err::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_.Destroy();
}

void Err::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Err::Clear() {
// @@protoc_insertion_point(message_clear_start:Err)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Err::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Err.err");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 originseqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_originseqnum(&has_bits);
          originseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Err::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Err)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Err.err");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_originseqnum(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Err)
  return target;
}

size_t Err::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Err)
  size_t total_size = 0;

  if (_internal_has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  if (_internal_has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t Err::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Err)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());

    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Err::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Err::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Err::GetClassData() const { return &_class_data_; }

void Err::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Err *>(to)->MergeFrom(
      static_cast<const Err &>(from));
}


void Err::MergeFrom(const Err& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Err)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_err(from._internal_err());
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Err::CopyFrom(const Err& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Err)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Err::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Err::InternalSwap(Err* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &err_, lhs_arena,
      &other->err_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Err, seqnum_)
      + sizeof(Err::seqnum_)
      - PROTOBUF_FIELD_OFFSET(Err, originseqnum_)>(
          reinterpret_cast<char*>(&originseqnum_),
          reinterpret_cast<char*>(&other->originseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Err::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[11]);
}

// ===================================================================

class UAcommands::_Internal {
 public:
  using HasBits = decltype(std::declval<UAcommands>()._has_bits_);
  static void set_has_disconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UAcommands::UAcommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  truckarr_(arena),
  delivered_(arena),
  changeresp_(arena),
  bindupsresponse_(arena),
  err_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAcommands)
}
UAcommands::UAcommands(const UAcommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      truckarr_(from.truckarr_),
      delivered_(from.delivered_),
      changeresp_(from.changeresp_),
      bindupsresponse_(from.bindupsresponse_),
      err_(from.err_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  disconnect_ = from.disconnect_;
  // @@protoc_insertion_point(copy_constructor:UAcommands)
}

inline void UAcommands::SharedCtor() {
disconnect_ = false;
}

UAcommands::~UAcommands() {
  // @@protoc_insertion_point(destructor:UAcommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAcommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAcommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAcommands::Clear() {
// @@protoc_insertion_point(message_clear_start:UAcommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  truckarr_.Clear();
  delivered_.Clear();
  changeresp_.Clear();
  bindupsresponse_.Clear();
  err_.Clear();
  acks_.Clear();
  disconnect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAcommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UAtruckArrived truckArr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_truckarr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UAdelivered delivered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UAchangeResp changeResp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changeresp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UAbindUPSResponse bindUPSResponse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bindupsresponse(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Err err = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_err(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_disconnect(&has_bits);
          disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAcommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAcommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UAtruckArrived truckArr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_truckarr_size()); i < n; i++) {
    const auto& repfield = this->_internal_truckarr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UAdelivered delivered = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivered_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivered(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UAchangeResp changeResp = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_changeresp_size()); i < n; i++) {
    const auto& repfield = this->_internal_changeresp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UAbindUPSResponse bindUPSResponse = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bindupsresponse_size()); i < n; i++) {
    const auto& repfield = this->_internal_bindupsresponse(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Err err = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_err_size()); i < n; i++) {
    const auto& repfield = this->_internal_err(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool disconnect = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_disconnect(), target);
  }

  // repeated int64 acks = 7;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAcommands)
  return target;
}

size_t UAcommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAcommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UAtruckArrived truckArr = 1;
  total_size += 1UL * this->_internal_truckarr_size();
  for (const auto& msg : this->truckarr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UAdelivered delivered = 2;
  total_size += 1UL * this->_internal_delivered_size();
  for (const auto& msg : this->delivered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UAchangeResp changeResp = 3;
  total_size += 1UL * this->_internal_changeresp_size();
  for (const auto& msg : this->changeresp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UAbindUPSResponse bindUPSResponse = 4;
  total_size += 1UL * this->_internal_bindupsresponse_size();
  for (const auto& msg : this->bindupsresponse_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Err err = 5;
  total_size += 1UL * this->_internal_err_size();
  for (const auto& msg : this->err_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // optional bool disconnect = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAcommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAcommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAcommands::GetClassData() const { return &_class_data_; }

void UAcommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAcommands *>(to)->MergeFrom(
      static_cast<const UAcommands &>(from));
}


void UAcommands::MergeFrom(const UAcommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAcommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  truckarr_.MergeFrom(from.truckarr_);
  delivered_.MergeFrom(from.delivered_);
  changeresp_.MergeFrom(from.changeresp_);
  bindupsresponse_.MergeFrom(from.bindupsresponse_);
  err_.MergeFrom(from.err_);
  acks_.MergeFrom(from.acks_);
  if (from._internal_has_disconnect()) {
    _internal_set_disconnect(from._internal_disconnect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAcommands::CopyFrom(const UAcommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAcommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAcommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(truckarr_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivered_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(changeresp_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bindupsresponse_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(err_))
    return false;
  return true;
}

void UAcommands::InternalSwap(UAcommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  truckarr_.InternalSwap(&other->truckarr_);
  delivered_.InternalSwap(&other->delivered_);
  changeresp_.InternalSwap(&other->changeresp_);
  bindupsresponse_.InternalSwap(&other->bindupsresponse_);
  err_.InternalSwap(&other->err_);
  acks_.InternalSwap(&other->acks_);
  swap(disconnect_, other->disconnect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAcommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[12]);
}

// ===================================================================

class AUcommands::_Internal {
 public:
  using HasBits = decltype(std::declval<AUcommands>()._has_bits_);
  static void set_has_disconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AUcommands::AUcommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pickup_(arena),
  delivery_(arena),
  changedest_(arena),
  bindups_(arena),
  err_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUcommands)
}
AUcommands::AUcommands(const AUcommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pickup_(from.pickup_),
      delivery_(from.delivery_),
      changedest_(from.changedest_),
      bindups_(from.bindups_),
      err_(from.err_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  disconnect_ = from.disconnect_;
  // @@protoc_insertion_point(copy_constructor:AUcommands)
}

inline void AUcommands::SharedCtor() {
disconnect_ = false;
}

AUcommands::~AUcommands() {
  // @@protoc_insertion_point(destructor:AUcommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUcommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUcommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUcommands::Clear() {
// @@protoc_insertion_point(message_clear_start:AUcommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pickup_.Clear();
  delivery_.Clear();
  changedest_.Clear();
  bindups_.Clear();
  err_.Clear();
  acks_.Clear();
  disconnect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUcommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AUreqPickup pickup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pickup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AUreqDelivery delivery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivery(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AUchangeDestn changeDest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changedest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AUbindUPS bindUPS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bindups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Err err = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_err(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_disconnect(&has_bits);
          disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUcommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUcommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AUreqPickup pickup = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pickup_size()); i < n; i++) {
    const auto& repfield = this->_internal_pickup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AUreqDelivery delivery = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivery_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivery(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AUchangeDestn changeDest = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_changedest_size()); i < n; i++) {
    const auto& repfield = this->_internal_changedest(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AUbindUPS bindUPS = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bindups_size()); i < n; i++) {
    const auto& repfield = this->_internal_bindups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Err err = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_err_size()); i < n; i++) {
    const auto& repfield = this->_internal_err(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool disconnect = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_disconnect(), target);
  }

  // repeated int64 acks = 7;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUcommands)
  return target;
}

size_t AUcommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUcommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AUreqPickup pickup = 1;
  total_size += 1UL * this->_internal_pickup_size();
  for (const auto& msg : this->pickup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AUreqDelivery delivery = 2;
  total_size += 1UL * this->_internal_delivery_size();
  for (const auto& msg : this->delivery_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AUchangeDestn changeDest = 3;
  total_size += 1UL * this->_internal_changedest_size();
  for (const auto& msg : this->changedest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AUbindUPS bindUPS = 4;
  total_size += 1UL * this->_internal_bindups_size();
  for (const auto& msg : this->bindups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Err err = 5;
  total_size += 1UL * this->_internal_err_size();
  for (const auto& msg : this->err_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // optional bool disconnect = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUcommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUcommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUcommands::GetClassData() const { return &_class_data_; }

void AUcommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUcommands *>(to)->MergeFrom(
      static_cast<const AUcommands &>(from));
}


void AUcommands::MergeFrom(const AUcommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUcommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pickup_.MergeFrom(from.pickup_);
  delivery_.MergeFrom(from.delivery_);
  changedest_.MergeFrom(from.changedest_);
  bindups_.MergeFrom(from.bindups_);
  err_.MergeFrom(from.err_);
  acks_.MergeFrom(from.acks_);
  if (from._internal_has_disconnect()) {
    _internal_set_disconnect(from._internal_disconnect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUcommands::CopyFrom(const AUcommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUcommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUcommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pickup_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivery_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(changedest_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bindups_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(err_))
    return false;
  return true;
}

void AUcommands::InternalSwap(AUcommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pickup_.InternalSwap(&other->pickup_);
  delivery_.InternalSwap(&other->delivery_);
  changedest_.InternalSwap(&other->changedest_);
  bindups_.InternalSwap(&other->bindups_);
  err_.InternalSwap(&other->err_);
  acks_.InternalSwap(&other->acks_);
  swap(disconnect_, other->disconnect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUcommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ups_5famazon_2eproto_getter, &descriptor_table_ups_5famazon_2eproto_once,
      file_level_metadata_ups_5famazon_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AProduct*
Arena::CreateMaybeMessage< ::AProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::UAinitWorld*
Arena::CreateMaybeMessage< ::UAinitWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAinitWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::AUconnectedWorld*
Arena::CreateMaybeMessage< ::AUconnectedWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUconnectedWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::AUbindUPS*
Arena::CreateMaybeMessage< ::AUbindUPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUbindUPS >(arena);
}
template<> PROTOBUF_NOINLINE ::UAbindUPSResponse*
Arena::CreateMaybeMessage< ::UAbindUPSResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAbindUPSResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AUreqPickup*
Arena::CreateMaybeMessage< ::AUreqPickup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUreqPickup >(arena);
}
template<> PROTOBUF_NOINLINE ::UAtruckArrived*
Arena::CreateMaybeMessage< ::UAtruckArrived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAtruckArrived >(arena);
}
template<> PROTOBUF_NOINLINE ::AUreqDelivery*
Arena::CreateMaybeMessage< ::AUreqDelivery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUreqDelivery >(arena);
}
template<> PROTOBUF_NOINLINE ::UAdelivered*
Arena::CreateMaybeMessage< ::UAdelivered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAdelivered >(arena);
}
template<> PROTOBUF_NOINLINE ::AUchangeDestn*
Arena::CreateMaybeMessage< ::AUchangeDestn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUchangeDestn >(arena);
}
template<> PROTOBUF_NOINLINE ::UAchangeResp*
Arena::CreateMaybeMessage< ::UAchangeResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAchangeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Err*
Arena::CreateMaybeMessage< ::Err >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Err >(arena);
}
template<> PROTOBUF_NOINLINE ::UAcommands*
Arena::CreateMaybeMessage< ::UAcommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAcommands >(arena);
}
template<> PROTOBUF_NOINLINE ::AUcommands*
Arena::CreateMaybeMessage< ::AUcommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUcommands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
