// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups_amazon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ups_5famazon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ups_5famazon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ups_5famazon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ups_5famazon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ups_5famazon_2eproto;
class AProduct;
struct AProductDefaultTypeInternal;
extern AProductDefaultTypeInternal _AProduct_default_instance_;
class AUbindUPS;
struct AUbindUPSDefaultTypeInternal;
extern AUbindUPSDefaultTypeInternal _AUbindUPS_default_instance_;
class AUchangeDestn;
struct AUchangeDestnDefaultTypeInternal;
extern AUchangeDestnDefaultTypeInternal _AUchangeDestn_default_instance_;
class AUcommands;
struct AUcommandsDefaultTypeInternal;
extern AUcommandsDefaultTypeInternal _AUcommands_default_instance_;
class AUconnectedWorld;
struct AUconnectedWorldDefaultTypeInternal;
extern AUconnectedWorldDefaultTypeInternal _AUconnectedWorld_default_instance_;
class AUreqDelivery;
struct AUreqDeliveryDefaultTypeInternal;
extern AUreqDeliveryDefaultTypeInternal _AUreqDelivery_default_instance_;
class AUreqPickup;
struct AUreqPickupDefaultTypeInternal;
extern AUreqPickupDefaultTypeInternal _AUreqPickup_default_instance_;
class Err;
struct ErrDefaultTypeInternal;
extern ErrDefaultTypeInternal _Err_default_instance_;
class UAbindUPSResponse;
struct UAbindUPSResponseDefaultTypeInternal;
extern UAbindUPSResponseDefaultTypeInternal _UAbindUPSResponse_default_instance_;
class UAchangeResp;
struct UAchangeRespDefaultTypeInternal;
extern UAchangeRespDefaultTypeInternal _UAchangeResp_default_instance_;
class UAcommands;
struct UAcommandsDefaultTypeInternal;
extern UAcommandsDefaultTypeInternal _UAcommands_default_instance_;
class UAdelivered;
struct UAdeliveredDefaultTypeInternal;
extern UAdeliveredDefaultTypeInternal _UAdelivered_default_instance_;
class UAinitWorld;
struct UAinitWorldDefaultTypeInternal;
extern UAinitWorldDefaultTypeInternal _UAinitWorld_default_instance_;
class UAtruckArrived;
struct UAtruckArrivedDefaultTypeInternal;
extern UAtruckArrivedDefaultTypeInternal _UAtruckArrived_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AProduct* Arena::CreateMaybeMessage<::AProduct>(Arena*);
template<> ::AUbindUPS* Arena::CreateMaybeMessage<::AUbindUPS>(Arena*);
template<> ::AUchangeDestn* Arena::CreateMaybeMessage<::AUchangeDestn>(Arena*);
template<> ::AUcommands* Arena::CreateMaybeMessage<::AUcommands>(Arena*);
template<> ::AUconnectedWorld* Arena::CreateMaybeMessage<::AUconnectedWorld>(Arena*);
template<> ::AUreqDelivery* Arena::CreateMaybeMessage<::AUreqDelivery>(Arena*);
template<> ::AUreqPickup* Arena::CreateMaybeMessage<::AUreqPickup>(Arena*);
template<> ::Err* Arena::CreateMaybeMessage<::Err>(Arena*);
template<> ::UAbindUPSResponse* Arena::CreateMaybeMessage<::UAbindUPSResponse>(Arena*);
template<> ::UAchangeResp* Arena::CreateMaybeMessage<::UAchangeResp>(Arena*);
template<> ::UAcommands* Arena::CreateMaybeMessage<::UAcommands>(Arena*);
template<> ::UAdelivered* Arena::CreateMaybeMessage<::UAdelivered>(Arena*);
template<> ::UAinitWorld* Arena::CreateMaybeMessage<::UAinitWorld>(Arena*);
template<> ::UAtruckArrived* Arena::CreateMaybeMessage<::UAtruckArrived>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AProduct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AProduct) */ {
 public:
  inline AProduct() : AProduct(nullptr) {}
  ~AProduct() override;
  explicit PROTOBUF_CONSTEXPR AProduct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AProduct(const AProduct& from);
  AProduct(AProduct&& from) noexcept
    : AProduct() {
    *this = ::std::move(from);
  }

  inline AProduct& operator=(const AProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline AProduct& operator=(AProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const AProduct* internal_default_instance() {
    return reinterpret_cast<const AProduct*>(
               &_AProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AProduct& a, AProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(AProduct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AProduct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AProduct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AProduct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AProduct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AProduct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AProduct";
  }
  protected:
  explicit AProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // required string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // required int32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AProduct)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int64_t id_;
  int32_t count_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class UAinitWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAinitWorld) */ {
 public:
  inline UAinitWorld() : UAinitWorld(nullptr) {}
  ~UAinitWorld() override;
  explicit PROTOBUF_CONSTEXPR UAinitWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAinitWorld(const UAinitWorld& from);
  UAinitWorld(UAinitWorld&& from) noexcept
    : UAinitWorld() {
    *this = ::std::move(from);
  }

  inline UAinitWorld& operator=(const UAinitWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAinitWorld& operator=(UAinitWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAinitWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAinitWorld* internal_default_instance() {
    return reinterpret_cast<const UAinitWorld*>(
               &_UAinitWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UAinitWorld& a, UAinitWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(UAinitWorld* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAinitWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAinitWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAinitWorld>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAinitWorld& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAinitWorld& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAinitWorld* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAinitWorld";
  }
  protected:
  explicit UAinitWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldIDFieldNumber = 1,
  };
  // required int64 worldID = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UAinitWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t worldid_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class AUconnectedWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUconnectedWorld) */ {
 public:
  inline AUconnectedWorld() : AUconnectedWorld(nullptr) {}
  ~AUconnectedWorld() override;
  explicit PROTOBUF_CONSTEXPR AUconnectedWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUconnectedWorld(const AUconnectedWorld& from);
  AUconnectedWorld(AUconnectedWorld&& from) noexcept
    : AUconnectedWorld() {
    *this = ::std::move(from);
  }

  inline AUconnectedWorld& operator=(const AUconnectedWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUconnectedWorld& operator=(AUconnectedWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUconnectedWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUconnectedWorld* internal_default_instance() {
    return reinterpret_cast<const AUconnectedWorld*>(
               &_AUconnectedWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AUconnectedWorld& a, AUconnectedWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(AUconnectedWorld* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUconnectedWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUconnectedWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUconnectedWorld>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUconnectedWorld& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUconnectedWorld& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUconnectedWorld* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUconnectedWorld";
  }
  protected:
  explicit AUconnectedWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // required bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AUconnectedWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class AUbindUPS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUbindUPS) */ {
 public:
  inline AUbindUPS() : AUbindUPS(nullptr) {}
  ~AUbindUPS() override;
  explicit PROTOBUF_CONSTEXPR AUbindUPS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUbindUPS(const AUbindUPS& from);
  AUbindUPS(AUbindUPS&& from) noexcept
    : AUbindUPS() {
    *this = ::std::move(from);
  }

  inline AUbindUPS& operator=(const AUbindUPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUbindUPS& operator=(AUbindUPS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUbindUPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUbindUPS* internal_default_instance() {
    return reinterpret_cast<const AUbindUPS*>(
               &_AUbindUPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AUbindUPS& a, AUbindUPS& b) {
    a.Swap(&b);
  }
  inline void Swap(AUbindUPS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUbindUPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUbindUPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUbindUPS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUbindUPS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUbindUPS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUbindUPS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUbindUPS";
  }
  protected:
  explicit AUbindUPS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIDFieldNumber = 1,
    kUpsIDFieldNumber = 2,
    kSeqNumFieldNumber = 3,
  };
  // required int32 ownerID = 1;
  bool has_ownerid() const;
  private:
  bool _internal_has_ownerid() const;
  public:
  void clear_ownerid();
  int32_t ownerid() const;
  void set_ownerid(int32_t value);
  private:
  int32_t _internal_ownerid() const;
  void _internal_set_ownerid(int32_t value);
  public:

  // required int32 upsID = 2;
  bool has_upsid() const;
  private:
  bool _internal_has_upsid() const;
  public:
  void clear_upsid();
  int32_t upsid() const;
  void set_upsid(int32_t value);
  private:
  int32_t _internal_upsid() const;
  void _internal_set_upsid(int32_t value);
  public:

  // required int64 seqNum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUbindUPS)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ownerid_;
  int32_t upsid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class UAbindUPSResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAbindUPSResponse) */ {
 public:
  inline UAbindUPSResponse() : UAbindUPSResponse(nullptr) {}
  ~UAbindUPSResponse() override;
  explicit PROTOBUF_CONSTEXPR UAbindUPSResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAbindUPSResponse(const UAbindUPSResponse& from);
  UAbindUPSResponse(UAbindUPSResponse&& from) noexcept
    : UAbindUPSResponse() {
    *this = ::std::move(from);
  }

  inline UAbindUPSResponse& operator=(const UAbindUPSResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAbindUPSResponse& operator=(UAbindUPSResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAbindUPSResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAbindUPSResponse* internal_default_instance() {
    return reinterpret_cast<const UAbindUPSResponse*>(
               &_UAbindUPSResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UAbindUPSResponse& a, UAbindUPSResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UAbindUPSResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAbindUPSResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAbindUPSResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAbindUPSResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAbindUPSResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAbindUPSResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAbindUPSResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAbindUPSResponse";
  }
  protected:
  explicit UAbindUPSResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kOwnerIDFieldNumber = 2,
    kSeqNumFieldNumber = 4,
    kUpsIDFieldNumber = 3,
  };
  // required bool status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // required int32 ownerID = 2;
  bool has_ownerid() const;
  private:
  bool _internal_has_ownerid() const;
  public:
  void clear_ownerid();
  int32_t ownerid() const;
  void set_ownerid(int32_t value);
  private:
  int32_t _internal_ownerid() const;
  void _internal_set_ownerid(int32_t value);
  public:

  // required int64 seqNum = 4;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 upsID = 3;
  bool has_upsid() const;
  private:
  bool _internal_has_upsid() const;
  public:
  void clear_upsid();
  int32_t upsid() const;
  void set_upsid(int32_t value);
  private:
  int32_t _internal_upsid() const;
  void _internal_set_upsid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UAbindUPSResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool status_;
  int32_t ownerid_;
  int64_t seqnum_;
  int32_t upsid_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class AUreqPickup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUreqPickup) */ {
 public:
  inline AUreqPickup() : AUreqPickup(nullptr) {}
  ~AUreqPickup() override;
  explicit PROTOBUF_CONSTEXPR AUreqPickup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUreqPickup(const AUreqPickup& from);
  AUreqPickup(AUreqPickup&& from) noexcept
    : AUreqPickup() {
    *this = ::std::move(from);
  }

  inline AUreqPickup& operator=(const AUreqPickup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUreqPickup& operator=(AUreqPickup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUreqPickup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUreqPickup* internal_default_instance() {
    return reinterpret_cast<const AUreqPickup*>(
               &_AUreqPickup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AUreqPickup& a, AUreqPickup& b) {
    a.Swap(&b);
  }
  inline void Swap(AUreqPickup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUreqPickup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUreqPickup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUreqPickup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUreqPickup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUreqPickup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUreqPickup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUreqPickup";
  }
  protected:
  explicit AUreqPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 6,
    kWhIDFieldNumber = 1,
    kDestinationXFieldNumber = 2,
    kShipIDFieldNumber = 4,
    kDestinationYFieldNumber = 3,
    kUpsIDFieldNumber = 5,
    kSeqNumFieldNumber = 7,
  };
  // repeated .AProduct products = 6;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  ::AProduct* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AProduct >*
      mutable_products();
  private:
  const ::AProduct& _internal_products(int index) const;
  ::AProduct* _internal_add_products();
  public:
  const ::AProduct& products(int index) const;
  ::AProduct* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AProduct >&
      products() const;

  // required int32 whID = 1;
  bool has_whid() const;
  private:
  bool _internal_has_whid() const;
  public:
  void clear_whid();
  int32_t whid() const;
  void set_whid(int32_t value);
  private:
  int32_t _internal_whid() const;
  void _internal_set_whid(int32_t value);
  public:

  // required int32 destinationX = 2;
  bool has_destinationx() const;
  private:
  bool _internal_has_destinationx() const;
  public:
  void clear_destinationx();
  int32_t destinationx() const;
  void set_destinationx(int32_t value);
  private:
  int32_t _internal_destinationx() const;
  void _internal_set_destinationx(int32_t value);
  public:

  // required int64 shipID = 4;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int32 destinationY = 3;
  bool has_destinationy() const;
  private:
  bool _internal_has_destinationy() const;
  public:
  void clear_destinationy();
  int32_t destinationy() const;
  void set_destinationy(int32_t value);
  private:
  int32_t _internal_destinationy() const;
  void _internal_set_destinationy(int32_t value);
  public:

  // optional int32 upsID = 5;
  bool has_upsid() const;
  private:
  bool _internal_has_upsid() const;
  public:
  void clear_upsid();
  int32_t upsid() const;
  void set_upsid(int32_t value);
  private:
  int32_t _internal_upsid() const;
  void _internal_set_upsid(int32_t value);
  public:

  // required int64 seqNum = 7;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUreqPickup)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AProduct > products_;
  int32_t whid_;
  int32_t destinationx_;
  int64_t shipid_;
  int32_t destinationy_;
  int32_t upsid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class UAtruckArrived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAtruckArrived) */ {
 public:
  inline UAtruckArrived() : UAtruckArrived(nullptr) {}
  ~UAtruckArrived() override;
  explicit PROTOBUF_CONSTEXPR UAtruckArrived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAtruckArrived(const UAtruckArrived& from);
  UAtruckArrived(UAtruckArrived&& from) noexcept
    : UAtruckArrived() {
    *this = ::std::move(from);
  }

  inline UAtruckArrived& operator=(const UAtruckArrived& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAtruckArrived& operator=(UAtruckArrived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAtruckArrived& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAtruckArrived* internal_default_instance() {
    return reinterpret_cast<const UAtruckArrived*>(
               &_UAtruckArrived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UAtruckArrived& a, UAtruckArrived& b) {
    a.Swap(&b);
  }
  inline void Swap(UAtruckArrived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAtruckArrived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAtruckArrived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAtruckArrived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAtruckArrived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAtruckArrived& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAtruckArrived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAtruckArrived";
  }
  protected:
  explicit UAtruckArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipIDFieldNumber = 2,
    kWhIDFieldNumber = 1,
    kTruckIDFieldNumber = 3,
    kSeqNumFieldNumber = 4,
  };
  // required int64 shipID = 2;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int32 whID = 1;
  bool has_whid() const;
  private:
  bool _internal_has_whid() const;
  public:
  void clear_whid();
  int32_t whid() const;
  void set_whid(int32_t value);
  private:
  int32_t _internal_whid() const;
  void _internal_set_whid(int32_t value);
  public:

  // required int32 truckID = 3;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // required int64 seqNum = 4;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UAtruckArrived)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t shipid_;
  int32_t whid_;
  int32_t truckid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class AUreqDelivery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUreqDelivery) */ {
 public:
  inline AUreqDelivery() : AUreqDelivery(nullptr) {}
  ~AUreqDelivery() override;
  explicit PROTOBUF_CONSTEXPR AUreqDelivery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUreqDelivery(const AUreqDelivery& from);
  AUreqDelivery(AUreqDelivery&& from) noexcept
    : AUreqDelivery() {
    *this = ::std::move(from);
  }

  inline AUreqDelivery& operator=(const AUreqDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUreqDelivery& operator=(AUreqDelivery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUreqDelivery& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUreqDelivery* internal_default_instance() {
    return reinterpret_cast<const AUreqDelivery*>(
               &_AUreqDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AUreqDelivery& a, AUreqDelivery& b) {
    a.Swap(&b);
  }
  inline void Swap(AUreqDelivery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUreqDelivery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUreqDelivery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUreqDelivery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUreqDelivery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUreqDelivery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUreqDelivery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUreqDelivery";
  }
  protected:
  explicit AUreqDelivery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipIDFieldNumber = 1,
    kSeqNumFieldNumber = 2,
  };
  // required int64 shipID = 1;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int64 seqNum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUreqDelivery)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t shipid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class UAdelivered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAdelivered) */ {
 public:
  inline UAdelivered() : UAdelivered(nullptr) {}
  ~UAdelivered() override;
  explicit PROTOBUF_CONSTEXPR UAdelivered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAdelivered(const UAdelivered& from);
  UAdelivered(UAdelivered&& from) noexcept
    : UAdelivered() {
    *this = ::std::move(from);
  }

  inline UAdelivered& operator=(const UAdelivered& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAdelivered& operator=(UAdelivered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAdelivered& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAdelivered* internal_default_instance() {
    return reinterpret_cast<const UAdelivered*>(
               &_UAdelivered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UAdelivered& a, UAdelivered& b) {
    a.Swap(&b);
  }
  inline void Swap(UAdelivered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAdelivered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAdelivered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAdelivered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAdelivered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAdelivered& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAdelivered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAdelivered";
  }
  protected:
  explicit UAdelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipIDFieldNumber = 1,
    kSeqNumFieldNumber = 2,
  };
  // required int64 shipID = 1;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int64 seqNum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UAdelivered)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t shipid_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class AUchangeDestn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUchangeDestn) */ {
 public:
  inline AUchangeDestn() : AUchangeDestn(nullptr) {}
  ~AUchangeDestn() override;
  explicit PROTOBUF_CONSTEXPR AUchangeDestn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUchangeDestn(const AUchangeDestn& from);
  AUchangeDestn(AUchangeDestn&& from) noexcept
    : AUchangeDestn() {
    *this = ::std::move(from);
  }

  inline AUchangeDestn& operator=(const AUchangeDestn& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUchangeDestn& operator=(AUchangeDestn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUchangeDestn& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUchangeDestn* internal_default_instance() {
    return reinterpret_cast<const AUchangeDestn*>(
               &_AUchangeDestn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AUchangeDestn& a, AUchangeDestn& b) {
    a.Swap(&b);
  }
  inline void Swap(AUchangeDestn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUchangeDestn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUchangeDestn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUchangeDestn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUchangeDestn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUchangeDestn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUchangeDestn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUchangeDestn";
  }
  protected:
  explicit AUchangeDestn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipIDFieldNumber = 1,
    kDestinationXFieldNumber = 2,
    kDestinationYFieldNumber = 3,
    kSeqNumFieldNumber = 4,
  };
  // required int64 shipID = 1;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int32 destinationX = 2;
  bool has_destinationx() const;
  private:
  bool _internal_has_destinationx() const;
  public:
  void clear_destinationx();
  int32_t destinationx() const;
  void set_destinationx(int32_t value);
  private:
  int32_t _internal_destinationx() const;
  void _internal_set_destinationx(int32_t value);
  public:

  // required int32 destinationY = 3;
  bool has_destinationy() const;
  private:
  bool _internal_has_destinationy() const;
  public:
  void clear_destinationy();
  int32_t destinationy() const;
  void set_destinationy(int32_t value);
  private:
  int32_t _internal_destinationy() const;
  void _internal_set_destinationy(int32_t value);
  public:

  // required int64 seqNum = 4;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUchangeDestn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t shipid_;
  int32_t destinationx_;
  int32_t destinationy_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class UAchangeResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAchangeResp) */ {
 public:
  inline UAchangeResp() : UAchangeResp(nullptr) {}
  ~UAchangeResp() override;
  explicit PROTOBUF_CONSTEXPR UAchangeResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAchangeResp(const UAchangeResp& from);
  UAchangeResp(UAchangeResp&& from) noexcept
    : UAchangeResp() {
    *this = ::std::move(from);
  }

  inline UAchangeResp& operator=(const UAchangeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAchangeResp& operator=(UAchangeResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAchangeResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAchangeResp* internal_default_instance() {
    return reinterpret_cast<const UAchangeResp*>(
               &_UAchangeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UAchangeResp& a, UAchangeResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UAchangeResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAchangeResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAchangeResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAchangeResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAchangeResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAchangeResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAchangeResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAchangeResp";
  }
  protected:
  explicit UAchangeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcksFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // required int64 acks = 2;
  bool has_acks() const;
  private:
  bool _internal_has_acks() const;
  public:
  void clear_acks();
  int64_t acks() const;
  void set_acks(int64_t value);
  private:
  int64_t _internal_acks() const;
  void _internal_set_acks(int64_t value);
  public:

  // required bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UAchangeResp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t acks_;
  bool success_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class Err final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Err) */ {
 public:
  inline Err() : Err(nullptr) {}
  ~Err() override;
  explicit PROTOBUF_CONSTEXPR Err(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Err(const Err& from);
  Err(Err&& from) noexcept
    : Err() {
    *this = ::std::move(from);
  }

  inline Err& operator=(const Err& from) {
    CopyFrom(from);
    return *this;
  }
  inline Err& operator=(Err&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Err& default_instance() {
    return *internal_default_instance();
  }
  static inline const Err* internal_default_instance() {
    return reinterpret_cast<const Err*>(
               &_Err_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Err& a, Err& b) {
    a.Swap(&b);
  }
  inline void Swap(Err* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Err* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Err* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Err>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Err& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Err& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Err* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Err";
  }
  protected:
  explicit Err(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kOriginseqnumFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // required string err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const std::string& err() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // required int64 originseqnum = 2;
  bool has_originseqnum() const;
  private:
  bool _internal_has_originseqnum() const;
  public:
  void clear_originseqnum();
  int64_t originseqnum() const;
  void set_originseqnum(int64_t value);
  private:
  int64_t _internal_originseqnum() const;
  void _internal_set_originseqnum(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Err)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  int64_t originseqnum_;
  int64_t seqnum_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class UAcommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAcommands) */ {
 public:
  inline UAcommands() : UAcommands(nullptr) {}
  ~UAcommands() override;
  explicit PROTOBUF_CONSTEXPR UAcommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAcommands(const UAcommands& from);
  UAcommands(UAcommands&& from) noexcept
    : UAcommands() {
    *this = ::std::move(from);
  }

  inline UAcommands& operator=(const UAcommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAcommands& operator=(UAcommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAcommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAcommands* internal_default_instance() {
    return reinterpret_cast<const UAcommands*>(
               &_UAcommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UAcommands& a, UAcommands& b) {
    a.Swap(&b);
  }
  inline void Swap(UAcommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAcommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAcommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAcommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAcommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAcommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAcommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAcommands";
  }
  protected:
  explicit UAcommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTruckArrFieldNumber = 1,
    kDeliveredFieldNumber = 2,
    kChangeRespFieldNumber = 3,
    kBindUPSResponseFieldNumber = 4,
    kErrFieldNumber = 5,
    kAcksFieldNumber = 7,
    kDisconnectFieldNumber = 6,
  };
  // repeated .UAtruckArrived truckArr = 1;
  int truckarr_size() const;
  private:
  int _internal_truckarr_size() const;
  public:
  void clear_truckarr();
  ::UAtruckArrived* mutable_truckarr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAtruckArrived >*
      mutable_truckarr();
  private:
  const ::UAtruckArrived& _internal_truckarr(int index) const;
  ::UAtruckArrived* _internal_add_truckarr();
  public:
  const ::UAtruckArrived& truckarr(int index) const;
  ::UAtruckArrived* add_truckarr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAtruckArrived >&
      truckarr() const;

  // repeated .UAdelivered delivered = 2;
  int delivered_size() const;
  private:
  int _internal_delivered_size() const;
  public:
  void clear_delivered();
  ::UAdelivered* mutable_delivered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAdelivered >*
      mutable_delivered();
  private:
  const ::UAdelivered& _internal_delivered(int index) const;
  ::UAdelivered* _internal_add_delivered();
  public:
  const ::UAdelivered& delivered(int index) const;
  ::UAdelivered* add_delivered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAdelivered >&
      delivered() const;

  // repeated .UAchangeResp changeResp = 3;
  int changeresp_size() const;
  private:
  int _internal_changeresp_size() const;
  public:
  void clear_changeresp();
  ::UAchangeResp* mutable_changeresp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAchangeResp >*
      mutable_changeresp();
  private:
  const ::UAchangeResp& _internal_changeresp(int index) const;
  ::UAchangeResp* _internal_add_changeresp();
  public:
  const ::UAchangeResp& changeresp(int index) const;
  ::UAchangeResp* add_changeresp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAchangeResp >&
      changeresp() const;

  // repeated .UAbindUPSResponse bindUPSResponse = 4;
  int bindupsresponse_size() const;
  private:
  int _internal_bindupsresponse_size() const;
  public:
  void clear_bindupsresponse();
  ::UAbindUPSResponse* mutable_bindupsresponse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAbindUPSResponse >*
      mutable_bindupsresponse();
  private:
  const ::UAbindUPSResponse& _internal_bindupsresponse(int index) const;
  ::UAbindUPSResponse* _internal_add_bindupsresponse();
  public:
  const ::UAbindUPSResponse& bindupsresponse(int index) const;
  ::UAbindUPSResponse* add_bindupsresponse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAbindUPSResponse >&
      bindupsresponse() const;

  // repeated .Err err = 5;
  int err_size() const;
  private:
  int _internal_err_size() const;
  public:
  void clear_err();
  ::Err* mutable_err(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
      mutable_err();
  private:
  const ::Err& _internal_err(int index) const;
  ::Err* _internal_add_err();
  public:
  const ::Err& err(int index) const;
  ::Err* add_err();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
      err() const;

  // repeated int64 acks = 7;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // optional bool disconnect = 6;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  bool disconnect() const;
  void set_disconnect(bool value);
  private:
  bool _internal_disconnect() const;
  void _internal_set_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UAcommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAtruckArrived > truckarr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAdelivered > delivered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAchangeResp > changeresp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAbindUPSResponse > bindupsresponse_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err > err_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  bool disconnect_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// -------------------------------------------------------------------

class AUcommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUcommands) */ {
 public:
  inline AUcommands() : AUcommands(nullptr) {}
  ~AUcommands() override;
  explicit PROTOBUF_CONSTEXPR AUcommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUcommands(const AUcommands& from);
  AUcommands(AUcommands&& from) noexcept
    : AUcommands() {
    *this = ::std::move(from);
  }

  inline AUcommands& operator=(const AUcommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUcommands& operator=(AUcommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUcommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUcommands* internal_default_instance() {
    return reinterpret_cast<const AUcommands*>(
               &_AUcommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AUcommands& a, AUcommands& b) {
    a.Swap(&b);
  }
  inline void Swap(AUcommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUcommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUcommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUcommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUcommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUcommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUcommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUcommands";
  }
  protected:
  explicit AUcommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPickupFieldNumber = 1,
    kDeliveryFieldNumber = 2,
    kChangeDestFieldNumber = 3,
    kBindUPSFieldNumber = 4,
    kErrFieldNumber = 5,
    kAcksFieldNumber = 7,
    kDisconnectFieldNumber = 6,
  };
  // repeated .AUreqPickup pickup = 1;
  int pickup_size() const;
  private:
  int _internal_pickup_size() const;
  public:
  void clear_pickup();
  ::AUreqPickup* mutable_pickup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqPickup >*
      mutable_pickup();
  private:
  const ::AUreqPickup& _internal_pickup(int index) const;
  ::AUreqPickup* _internal_add_pickup();
  public:
  const ::AUreqPickup& pickup(int index) const;
  ::AUreqPickup* add_pickup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqPickup >&
      pickup() const;

  // repeated .AUreqDelivery delivery = 2;
  int delivery_size() const;
  private:
  int _internal_delivery_size() const;
  public:
  void clear_delivery();
  ::AUreqDelivery* mutable_delivery(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqDelivery >*
      mutable_delivery();
  private:
  const ::AUreqDelivery& _internal_delivery(int index) const;
  ::AUreqDelivery* _internal_add_delivery();
  public:
  const ::AUreqDelivery& delivery(int index) const;
  ::AUreqDelivery* add_delivery();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqDelivery >&
      delivery() const;

  // repeated .AUchangeDestn changeDest = 3;
  int changedest_size() const;
  private:
  int _internal_changedest_size() const;
  public:
  void clear_changedest();
  ::AUchangeDestn* mutable_changedest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUchangeDestn >*
      mutable_changedest();
  private:
  const ::AUchangeDestn& _internal_changedest(int index) const;
  ::AUchangeDestn* _internal_add_changedest();
  public:
  const ::AUchangeDestn& changedest(int index) const;
  ::AUchangeDestn* add_changedest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUchangeDestn >&
      changedest() const;

  // repeated .AUbindUPS bindUPS = 4;
  int bindups_size() const;
  private:
  int _internal_bindups_size() const;
  public:
  void clear_bindups();
  ::AUbindUPS* mutable_bindups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUbindUPS >*
      mutable_bindups();
  private:
  const ::AUbindUPS& _internal_bindups(int index) const;
  ::AUbindUPS* _internal_add_bindups();
  public:
  const ::AUbindUPS& bindups(int index) const;
  ::AUbindUPS* add_bindups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUbindUPS >&
      bindups() const;

  // repeated .Err err = 5;
  int err_size() const;
  private:
  int _internal_err_size() const;
  public:
  void clear_err();
  ::Err* mutable_err(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
      mutable_err();
  private:
  const ::Err& _internal_err(int index) const;
  ::Err* _internal_add_err();
  public:
  const ::Err& err(int index) const;
  ::Err* add_err();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
      err() const;

  // repeated int64 acks = 7;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // optional bool disconnect = 6;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  bool disconnect() const;
  void set_disconnect(bool value);
  private:
  bool _internal_disconnect() const;
  void _internal_set_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AUcommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqPickup > pickup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqDelivery > delivery_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUchangeDestn > changedest_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUbindUPS > bindups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err > err_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  bool disconnect_;
  friend struct ::TableStruct_ups_5famazon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AProduct

// required int64 id = 1;
inline bool AProduct::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AProduct::has_id() const {
  return _internal_has_id();
}
inline void AProduct::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AProduct::_internal_id() const {
  return id_;
}
inline int64_t AProduct::id() const {
  // @@protoc_insertion_point(field_get:AProduct.id)
  return _internal_id();
}
inline void AProduct::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AProduct::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AProduct.id)
}

// required string description = 2;
inline bool AProduct::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AProduct::has_description() const {
  return _internal_has_description();
}
inline void AProduct::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AProduct::description() const {
  // @@protoc_insertion_point(field_get:AProduct.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AProduct::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AProduct.description)
}
inline std::string* AProduct::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:AProduct.description)
  return _s;
}
inline const std::string& AProduct::_internal_description() const {
  return description_.Get();
}
inline void AProduct::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* AProduct::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* AProduct::release_description() {
  // @@protoc_insertion_point(field_release:AProduct.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AProduct::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AProduct.description)
}

// required int32 count = 3;
inline bool AProduct::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AProduct::has_count() const {
  return _internal_has_count();
}
inline void AProduct::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AProduct::_internal_count() const {
  return count_;
}
inline int32_t AProduct::count() const {
  // @@protoc_insertion_point(field_get:AProduct.count)
  return _internal_count();
}
inline void AProduct::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void AProduct::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AProduct.count)
}

// -------------------------------------------------------------------

// UAinitWorld

// required int64 worldID = 1;
inline bool UAinitWorld::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAinitWorld::has_worldid() const {
  return _internal_has_worldid();
}
inline void UAinitWorld::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UAinitWorld::_internal_worldid() const {
  return worldid_;
}
inline int64_t UAinitWorld::worldid() const {
  // @@protoc_insertion_point(field_get:UAinitWorld.worldID)
  return _internal_worldid();
}
inline void UAinitWorld::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  worldid_ = value;
}
inline void UAinitWorld::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:UAinitWorld.worldID)
}

// -------------------------------------------------------------------

// AUconnectedWorld

// required bool success = 1;
inline bool AUconnectedWorld::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUconnectedWorld::has_success() const {
  return _internal_has_success();
}
inline void AUconnectedWorld::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AUconnectedWorld::_internal_success() const {
  return success_;
}
inline bool AUconnectedWorld::success() const {
  // @@protoc_insertion_point(field_get:AUconnectedWorld.success)
  return _internal_success();
}
inline void AUconnectedWorld::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void AUconnectedWorld::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:AUconnectedWorld.success)
}

// -------------------------------------------------------------------

// AUbindUPS

// required int32 ownerID = 1;
inline bool AUbindUPS::_internal_has_ownerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUbindUPS::has_ownerid() const {
  return _internal_has_ownerid();
}
inline void AUbindUPS::clear_ownerid() {
  ownerid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AUbindUPS::_internal_ownerid() const {
  return ownerid_;
}
inline int32_t AUbindUPS::ownerid() const {
  // @@protoc_insertion_point(field_get:AUbindUPS.ownerID)
  return _internal_ownerid();
}
inline void AUbindUPS::_internal_set_ownerid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ownerid_ = value;
}
inline void AUbindUPS::set_ownerid(int32_t value) {
  _internal_set_ownerid(value);
  // @@protoc_insertion_point(field_set:AUbindUPS.ownerID)
}

// required int32 upsID = 2;
inline bool AUbindUPS::_internal_has_upsid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUbindUPS::has_upsid() const {
  return _internal_has_upsid();
}
inline void AUbindUPS::clear_upsid() {
  upsid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AUbindUPS::_internal_upsid() const {
  return upsid_;
}
inline int32_t AUbindUPS::upsid() const {
  // @@protoc_insertion_point(field_get:AUbindUPS.upsID)
  return _internal_upsid();
}
inline void AUbindUPS::_internal_set_upsid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  upsid_ = value;
}
inline void AUbindUPS::set_upsid(int32_t value) {
  _internal_set_upsid(value);
  // @@protoc_insertion_point(field_set:AUbindUPS.upsID)
}

// required int64 seqNum = 3;
inline bool AUbindUPS::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUbindUPS::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUbindUPS::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t AUbindUPS::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUbindUPS::seqnum() const {
  // @@protoc_insertion_point(field_get:AUbindUPS.seqNum)
  return _internal_seqnum();
}
inline void AUbindUPS::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void AUbindUPS::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUbindUPS.seqNum)
}

// -------------------------------------------------------------------

// UAbindUPSResponse

// required bool status = 1;
inline bool UAbindUPSResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAbindUPSResponse::has_status() const {
  return _internal_has_status();
}
inline void UAbindUPSResponse::clear_status() {
  status_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool UAbindUPSResponse::_internal_status() const {
  return status_;
}
inline bool UAbindUPSResponse::status() const {
  // @@protoc_insertion_point(field_get:UAbindUPSResponse.status)
  return _internal_status();
}
inline void UAbindUPSResponse::_internal_set_status(bool value) {
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void UAbindUPSResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UAbindUPSResponse.status)
}

// required int32 ownerID = 2;
inline bool UAbindUPSResponse::_internal_has_ownerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAbindUPSResponse::has_ownerid() const {
  return _internal_has_ownerid();
}
inline void UAbindUPSResponse::clear_ownerid() {
  ownerid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UAbindUPSResponse::_internal_ownerid() const {
  return ownerid_;
}
inline int32_t UAbindUPSResponse::ownerid() const {
  // @@protoc_insertion_point(field_get:UAbindUPSResponse.ownerID)
  return _internal_ownerid();
}
inline void UAbindUPSResponse::_internal_set_ownerid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ownerid_ = value;
}
inline void UAbindUPSResponse::set_ownerid(int32_t value) {
  _internal_set_ownerid(value);
  // @@protoc_insertion_point(field_set:UAbindUPSResponse.ownerID)
}

// required int32 upsID = 3;
inline bool UAbindUPSResponse::_internal_has_upsid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UAbindUPSResponse::has_upsid() const {
  return _internal_has_upsid();
}
inline void UAbindUPSResponse::clear_upsid() {
  upsid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t UAbindUPSResponse::_internal_upsid() const {
  return upsid_;
}
inline int32_t UAbindUPSResponse::upsid() const {
  // @@protoc_insertion_point(field_get:UAbindUPSResponse.upsID)
  return _internal_upsid();
}
inline void UAbindUPSResponse::_internal_set_upsid(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  upsid_ = value;
}
inline void UAbindUPSResponse::set_upsid(int32_t value) {
  _internal_set_upsid(value);
  // @@protoc_insertion_point(field_set:UAbindUPSResponse.upsID)
}

// required int64 seqNum = 4;
inline bool UAbindUPSResponse::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UAbindUPSResponse::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UAbindUPSResponse::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t UAbindUPSResponse::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UAbindUPSResponse::seqnum() const {
  // @@protoc_insertion_point(field_get:UAbindUPSResponse.seqNum)
  return _internal_seqnum();
}
inline void UAbindUPSResponse::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void UAbindUPSResponse::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UAbindUPSResponse.seqNum)
}

// -------------------------------------------------------------------

// AUreqPickup

// required int32 whID = 1;
inline bool AUreqPickup::_internal_has_whid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUreqPickup::has_whid() const {
  return _internal_has_whid();
}
inline void AUreqPickup::clear_whid() {
  whid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AUreqPickup::_internal_whid() const {
  return whid_;
}
inline int32_t AUreqPickup::whid() const {
  // @@protoc_insertion_point(field_get:AUreqPickup.whID)
  return _internal_whid();
}
inline void AUreqPickup::_internal_set_whid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  whid_ = value;
}
inline void AUreqPickup::set_whid(int32_t value) {
  _internal_set_whid(value);
  // @@protoc_insertion_point(field_set:AUreqPickup.whID)
}

// required int32 destinationX = 2;
inline bool AUreqPickup::_internal_has_destinationx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUreqPickup::has_destinationx() const {
  return _internal_has_destinationx();
}
inline void AUreqPickup::clear_destinationx() {
  destinationx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AUreqPickup::_internal_destinationx() const {
  return destinationx_;
}
inline int32_t AUreqPickup::destinationx() const {
  // @@protoc_insertion_point(field_get:AUreqPickup.destinationX)
  return _internal_destinationx();
}
inline void AUreqPickup::_internal_set_destinationx(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  destinationx_ = value;
}
inline void AUreqPickup::set_destinationx(int32_t value) {
  _internal_set_destinationx(value);
  // @@protoc_insertion_point(field_set:AUreqPickup.destinationX)
}

// required int32 destinationY = 3;
inline bool AUreqPickup::_internal_has_destinationy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AUreqPickup::has_destinationy() const {
  return _internal_has_destinationy();
}
inline void AUreqPickup::clear_destinationy() {
  destinationy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t AUreqPickup::_internal_destinationy() const {
  return destinationy_;
}
inline int32_t AUreqPickup::destinationy() const {
  // @@protoc_insertion_point(field_get:AUreqPickup.destinationY)
  return _internal_destinationy();
}
inline void AUreqPickup::_internal_set_destinationy(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  destinationy_ = value;
}
inline void AUreqPickup::set_destinationy(int32_t value) {
  _internal_set_destinationy(value);
  // @@protoc_insertion_point(field_set:AUreqPickup.destinationY)
}

// required int64 shipID = 4;
inline bool AUreqPickup::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUreqPickup::has_shipid() const {
  return _internal_has_shipid();
}
inline void AUreqPickup::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t AUreqPickup::_internal_shipid() const {
  return shipid_;
}
inline int64_t AUreqPickup::shipid() const {
  // @@protoc_insertion_point(field_get:AUreqPickup.shipID)
  return _internal_shipid();
}
inline void AUreqPickup::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  shipid_ = value;
}
inline void AUreqPickup::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:AUreqPickup.shipID)
}

// optional int32 upsID = 5;
inline bool AUreqPickup::_internal_has_upsid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AUreqPickup::has_upsid() const {
  return _internal_has_upsid();
}
inline void AUreqPickup::clear_upsid() {
  upsid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t AUreqPickup::_internal_upsid() const {
  return upsid_;
}
inline int32_t AUreqPickup::upsid() const {
  // @@protoc_insertion_point(field_get:AUreqPickup.upsID)
  return _internal_upsid();
}
inline void AUreqPickup::_internal_set_upsid(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  upsid_ = value;
}
inline void AUreqPickup::set_upsid(int32_t value) {
  _internal_set_upsid(value);
  // @@protoc_insertion_point(field_set:AUreqPickup.upsID)
}

// repeated .AProduct products = 6;
inline int AUreqPickup::_internal_products_size() const {
  return products_.size();
}
inline int AUreqPickup::products_size() const {
  return _internal_products_size();
}
inline void AUreqPickup::clear_products() {
  products_.Clear();
}
inline ::AProduct* AUreqPickup::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:AUreqPickup.products)
  return products_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AProduct >*
AUreqPickup::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:AUreqPickup.products)
  return &products_;
}
inline const ::AProduct& AUreqPickup::_internal_products(int index) const {
  return products_.Get(index);
}
inline const ::AProduct& AUreqPickup::products(int index) const {
  // @@protoc_insertion_point(field_get:AUreqPickup.products)
  return _internal_products(index);
}
inline ::AProduct* AUreqPickup::_internal_add_products() {
  return products_.Add();
}
inline ::AProduct* AUreqPickup::add_products() {
  ::AProduct* _add = _internal_add_products();
  // @@protoc_insertion_point(field_add:AUreqPickup.products)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AProduct >&
AUreqPickup::products() const {
  // @@protoc_insertion_point(field_list:AUreqPickup.products)
  return products_;
}

// required int64 seqNum = 7;
inline bool AUreqPickup::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AUreqPickup::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUreqPickup::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t AUreqPickup::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUreqPickup::seqnum() const {
  // @@protoc_insertion_point(field_get:AUreqPickup.seqNum)
  return _internal_seqnum();
}
inline void AUreqPickup::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  seqnum_ = value;
}
inline void AUreqPickup::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUreqPickup.seqNum)
}

// -------------------------------------------------------------------

// UAtruckArrived

// required int32 whID = 1;
inline bool UAtruckArrived::_internal_has_whid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAtruckArrived::has_whid() const {
  return _internal_has_whid();
}
inline void UAtruckArrived::clear_whid() {
  whid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UAtruckArrived::_internal_whid() const {
  return whid_;
}
inline int32_t UAtruckArrived::whid() const {
  // @@protoc_insertion_point(field_get:UAtruckArrived.whID)
  return _internal_whid();
}
inline void UAtruckArrived::_internal_set_whid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  whid_ = value;
}
inline void UAtruckArrived::set_whid(int32_t value) {
  _internal_set_whid(value);
  // @@protoc_insertion_point(field_set:UAtruckArrived.whID)
}

// required int64 shipID = 2;
inline bool UAtruckArrived::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAtruckArrived::has_shipid() const {
  return _internal_has_shipid();
}
inline void UAtruckArrived::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UAtruckArrived::_internal_shipid() const {
  return shipid_;
}
inline int64_t UAtruckArrived::shipid() const {
  // @@protoc_insertion_point(field_get:UAtruckArrived.shipID)
  return _internal_shipid();
}
inline void UAtruckArrived::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  shipid_ = value;
}
inline void UAtruckArrived::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:UAtruckArrived.shipID)
}

// required int32 truckID = 3;
inline bool UAtruckArrived::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UAtruckArrived::has_truckid() const {
  return _internal_has_truckid();
}
inline void UAtruckArrived::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UAtruckArrived::_internal_truckid() const {
  return truckid_;
}
inline int32_t UAtruckArrived::truckid() const {
  // @@protoc_insertion_point(field_get:UAtruckArrived.truckID)
  return _internal_truckid();
}
inline void UAtruckArrived::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  truckid_ = value;
}
inline void UAtruckArrived::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UAtruckArrived.truckID)
}

// required int64 seqNum = 4;
inline bool UAtruckArrived::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UAtruckArrived::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UAtruckArrived::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t UAtruckArrived::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UAtruckArrived::seqnum() const {
  // @@protoc_insertion_point(field_get:UAtruckArrived.seqNum)
  return _internal_seqnum();
}
inline void UAtruckArrived::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqnum_ = value;
}
inline void UAtruckArrived::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UAtruckArrived.seqNum)
}

// -------------------------------------------------------------------

// AUreqDelivery

// required int64 shipID = 1;
inline bool AUreqDelivery::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUreqDelivery::has_shipid() const {
  return _internal_has_shipid();
}
inline void AUreqDelivery::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t AUreqDelivery::_internal_shipid() const {
  return shipid_;
}
inline int64_t AUreqDelivery::shipid() const {
  // @@protoc_insertion_point(field_get:AUreqDelivery.shipID)
  return _internal_shipid();
}
inline void AUreqDelivery::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  shipid_ = value;
}
inline void AUreqDelivery::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:AUreqDelivery.shipID)
}

// required int64 seqNum = 2;
inline bool AUreqDelivery::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUreqDelivery::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUreqDelivery::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AUreqDelivery::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUreqDelivery::seqnum() const {
  // @@protoc_insertion_point(field_get:AUreqDelivery.seqNum)
  return _internal_seqnum();
}
inline void AUreqDelivery::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void AUreqDelivery::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUreqDelivery.seqNum)
}

// -------------------------------------------------------------------

// UAdelivered

// required int64 shipID = 1;
inline bool UAdelivered::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAdelivered::has_shipid() const {
  return _internal_has_shipid();
}
inline void UAdelivered::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UAdelivered::_internal_shipid() const {
  return shipid_;
}
inline int64_t UAdelivered::shipid() const {
  // @@protoc_insertion_point(field_get:UAdelivered.shipID)
  return _internal_shipid();
}
inline void UAdelivered::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  shipid_ = value;
}
inline void UAdelivered::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:UAdelivered.shipID)
}

// required int64 seqNum = 2;
inline bool UAdelivered::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAdelivered::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UAdelivered::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UAdelivered::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UAdelivered::seqnum() const {
  // @@protoc_insertion_point(field_get:UAdelivered.seqNum)
  return _internal_seqnum();
}
inline void UAdelivered::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UAdelivered::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UAdelivered.seqNum)
}

// -------------------------------------------------------------------

// AUchangeDestn

// required int64 shipID = 1;
inline bool AUchangeDestn::_internal_has_shipid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUchangeDestn::has_shipid() const {
  return _internal_has_shipid();
}
inline void AUchangeDestn::clear_shipid() {
  shipid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t AUchangeDestn::_internal_shipid() const {
  return shipid_;
}
inline int64_t AUchangeDestn::shipid() const {
  // @@protoc_insertion_point(field_get:AUchangeDestn.shipID)
  return _internal_shipid();
}
inline void AUchangeDestn::_internal_set_shipid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  shipid_ = value;
}
inline void AUchangeDestn::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:AUchangeDestn.shipID)
}

// required int32 destinationX = 2;
inline bool AUchangeDestn::_internal_has_destinationx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUchangeDestn::has_destinationx() const {
  return _internal_has_destinationx();
}
inline void AUchangeDestn::clear_destinationx() {
  destinationx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AUchangeDestn::_internal_destinationx() const {
  return destinationx_;
}
inline int32_t AUchangeDestn::destinationx() const {
  // @@protoc_insertion_point(field_get:AUchangeDestn.destinationX)
  return _internal_destinationx();
}
inline void AUchangeDestn::_internal_set_destinationx(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  destinationx_ = value;
}
inline void AUchangeDestn::set_destinationx(int32_t value) {
  _internal_set_destinationx(value);
  // @@protoc_insertion_point(field_set:AUchangeDestn.destinationX)
}

// required int32 destinationY = 3;
inline bool AUchangeDestn::_internal_has_destinationy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUchangeDestn::has_destinationy() const {
  return _internal_has_destinationy();
}
inline void AUchangeDestn::clear_destinationy() {
  destinationy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AUchangeDestn::_internal_destinationy() const {
  return destinationy_;
}
inline int32_t AUchangeDestn::destinationy() const {
  // @@protoc_insertion_point(field_get:AUchangeDestn.destinationY)
  return _internal_destinationy();
}
inline void AUchangeDestn::_internal_set_destinationy(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  destinationy_ = value;
}
inline void AUchangeDestn::set_destinationy(int32_t value) {
  _internal_set_destinationy(value);
  // @@protoc_insertion_point(field_set:AUchangeDestn.destinationY)
}

// required int64 seqNum = 4;
inline bool AUchangeDestn::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AUchangeDestn::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUchangeDestn::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t AUchangeDestn::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUchangeDestn::seqnum() const {
  // @@protoc_insertion_point(field_get:AUchangeDestn.seqNum)
  return _internal_seqnum();
}
inline void AUchangeDestn::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqnum_ = value;
}
inline void AUchangeDestn::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUchangeDestn.seqNum)
}

// -------------------------------------------------------------------

// UAchangeResp

// required bool success = 1;
inline bool UAchangeResp::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAchangeResp::has_success() const {
  return _internal_has_success();
}
inline void UAchangeResp::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UAchangeResp::_internal_success() const {
  return success_;
}
inline bool UAchangeResp::success() const {
  // @@protoc_insertion_point(field_get:UAchangeResp.success)
  return _internal_success();
}
inline void UAchangeResp::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void UAchangeResp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UAchangeResp.success)
}

// required int64 acks = 2;
inline bool UAchangeResp::_internal_has_acks() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAchangeResp::has_acks() const {
  return _internal_has_acks();
}
inline void UAchangeResp::clear_acks() {
  acks_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UAchangeResp::_internal_acks() const {
  return acks_;
}
inline int64_t UAchangeResp::acks() const {
  // @@protoc_insertion_point(field_get:UAchangeResp.acks)
  return _internal_acks();
}
inline void UAchangeResp::_internal_set_acks(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  acks_ = value;
}
inline void UAchangeResp::set_acks(int64_t value) {
  _internal_set_acks(value);
  // @@protoc_insertion_point(field_set:UAchangeResp.acks)
}

// -------------------------------------------------------------------

// Err

// required string err = 1;
inline bool Err::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Err::has_err() const {
  return _internal_has_err();
}
inline void Err::clear_err() {
  err_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Err::err() const {
  // @@protoc_insertion_point(field_get:Err.err)
  return _internal_err();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Err::set_err(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 err_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Err.err)
}
inline std::string* Err::mutable_err() {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:Err.err)
  return _s;
}
inline const std::string& Err::_internal_err() const {
  return err_.Get();
}
inline void Err::_internal_set_err(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  err_.Set(value, GetArenaForAllocation());
}
inline std::string* Err::_internal_mutable_err() {
  _has_bits_[0] |= 0x00000001u;
  return err_.Mutable(GetArenaForAllocation());
}
inline std::string* Err::release_err() {
  // @@protoc_insertion_point(field_release:Err.err)
  if (!_internal_has_err()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = err_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Err::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  err_.SetAllocated(err, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Err.err)
}

// required int64 originseqnum = 2;
inline bool Err::_internal_has_originseqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Err::has_originseqnum() const {
  return _internal_has_originseqnum();
}
inline void Err::clear_originseqnum() {
  originseqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Err::_internal_originseqnum() const {
  return originseqnum_;
}
inline int64_t Err::originseqnum() const {
  // @@protoc_insertion_point(field_get:Err.originseqnum)
  return _internal_originseqnum();
}
inline void Err::_internal_set_originseqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  originseqnum_ = value;
}
inline void Err::set_originseqnum(int64_t value) {
  _internal_set_originseqnum(value);
  // @@protoc_insertion_point(field_set:Err.originseqnum)
}

// required int64 seqnum = 3;
inline bool Err::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Err::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void Err::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Err::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t Err::seqnum() const {
  // @@protoc_insertion_point(field_get:Err.seqnum)
  return _internal_seqnum();
}
inline void Err::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void Err::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:Err.seqnum)
}

// -------------------------------------------------------------------

// UAcommands

// repeated .UAtruckArrived truckArr = 1;
inline int UAcommands::_internal_truckarr_size() const {
  return truckarr_.size();
}
inline int UAcommands::truckarr_size() const {
  return _internal_truckarr_size();
}
inline void UAcommands::clear_truckarr() {
  truckarr_.Clear();
}
inline ::UAtruckArrived* UAcommands::mutable_truckarr(int index) {
  // @@protoc_insertion_point(field_mutable:UAcommands.truckArr)
  return truckarr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAtruckArrived >*
UAcommands::mutable_truckarr() {
  // @@protoc_insertion_point(field_mutable_list:UAcommands.truckArr)
  return &truckarr_;
}
inline const ::UAtruckArrived& UAcommands::_internal_truckarr(int index) const {
  return truckarr_.Get(index);
}
inline const ::UAtruckArrived& UAcommands::truckarr(int index) const {
  // @@protoc_insertion_point(field_get:UAcommands.truckArr)
  return _internal_truckarr(index);
}
inline ::UAtruckArrived* UAcommands::_internal_add_truckarr() {
  return truckarr_.Add();
}
inline ::UAtruckArrived* UAcommands::add_truckarr() {
  ::UAtruckArrived* _add = _internal_add_truckarr();
  // @@protoc_insertion_point(field_add:UAcommands.truckArr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAtruckArrived >&
UAcommands::truckarr() const {
  // @@protoc_insertion_point(field_list:UAcommands.truckArr)
  return truckarr_;
}

// repeated .UAdelivered delivered = 2;
inline int UAcommands::_internal_delivered_size() const {
  return delivered_.size();
}
inline int UAcommands::delivered_size() const {
  return _internal_delivered_size();
}
inline void UAcommands::clear_delivered() {
  delivered_.Clear();
}
inline ::UAdelivered* UAcommands::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:UAcommands.delivered)
  return delivered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAdelivered >*
UAcommands::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:UAcommands.delivered)
  return &delivered_;
}
inline const ::UAdelivered& UAcommands::_internal_delivered(int index) const {
  return delivered_.Get(index);
}
inline const ::UAdelivered& UAcommands::delivered(int index) const {
  // @@protoc_insertion_point(field_get:UAcommands.delivered)
  return _internal_delivered(index);
}
inline ::UAdelivered* UAcommands::_internal_add_delivered() {
  return delivered_.Add();
}
inline ::UAdelivered* UAcommands::add_delivered() {
  ::UAdelivered* _add = _internal_add_delivered();
  // @@protoc_insertion_point(field_add:UAcommands.delivered)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAdelivered >&
UAcommands::delivered() const {
  // @@protoc_insertion_point(field_list:UAcommands.delivered)
  return delivered_;
}

// repeated .UAchangeResp changeResp = 3;
inline int UAcommands::_internal_changeresp_size() const {
  return changeresp_.size();
}
inline int UAcommands::changeresp_size() const {
  return _internal_changeresp_size();
}
inline void UAcommands::clear_changeresp() {
  changeresp_.Clear();
}
inline ::UAchangeResp* UAcommands::mutable_changeresp(int index) {
  // @@protoc_insertion_point(field_mutable:UAcommands.changeResp)
  return changeresp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAchangeResp >*
UAcommands::mutable_changeresp() {
  // @@protoc_insertion_point(field_mutable_list:UAcommands.changeResp)
  return &changeresp_;
}
inline const ::UAchangeResp& UAcommands::_internal_changeresp(int index) const {
  return changeresp_.Get(index);
}
inline const ::UAchangeResp& UAcommands::changeresp(int index) const {
  // @@protoc_insertion_point(field_get:UAcommands.changeResp)
  return _internal_changeresp(index);
}
inline ::UAchangeResp* UAcommands::_internal_add_changeresp() {
  return changeresp_.Add();
}
inline ::UAchangeResp* UAcommands::add_changeresp() {
  ::UAchangeResp* _add = _internal_add_changeresp();
  // @@protoc_insertion_point(field_add:UAcommands.changeResp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAchangeResp >&
UAcommands::changeresp() const {
  // @@protoc_insertion_point(field_list:UAcommands.changeResp)
  return changeresp_;
}

// repeated .UAbindUPSResponse bindUPSResponse = 4;
inline int UAcommands::_internal_bindupsresponse_size() const {
  return bindupsresponse_.size();
}
inline int UAcommands::bindupsresponse_size() const {
  return _internal_bindupsresponse_size();
}
inline void UAcommands::clear_bindupsresponse() {
  bindupsresponse_.Clear();
}
inline ::UAbindUPSResponse* UAcommands::mutable_bindupsresponse(int index) {
  // @@protoc_insertion_point(field_mutable:UAcommands.bindUPSResponse)
  return bindupsresponse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAbindUPSResponse >*
UAcommands::mutable_bindupsresponse() {
  // @@protoc_insertion_point(field_mutable_list:UAcommands.bindUPSResponse)
  return &bindupsresponse_;
}
inline const ::UAbindUPSResponse& UAcommands::_internal_bindupsresponse(int index) const {
  return bindupsresponse_.Get(index);
}
inline const ::UAbindUPSResponse& UAcommands::bindupsresponse(int index) const {
  // @@protoc_insertion_point(field_get:UAcommands.bindUPSResponse)
  return _internal_bindupsresponse(index);
}
inline ::UAbindUPSResponse* UAcommands::_internal_add_bindupsresponse() {
  return bindupsresponse_.Add();
}
inline ::UAbindUPSResponse* UAcommands::add_bindupsresponse() {
  ::UAbindUPSResponse* _add = _internal_add_bindupsresponse();
  // @@protoc_insertion_point(field_add:UAcommands.bindUPSResponse)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UAbindUPSResponse >&
UAcommands::bindupsresponse() const {
  // @@protoc_insertion_point(field_list:UAcommands.bindUPSResponse)
  return bindupsresponse_;
}

// repeated .Err err = 5;
inline int UAcommands::_internal_err_size() const {
  return err_.size();
}
inline int UAcommands::err_size() const {
  return _internal_err_size();
}
inline void UAcommands::clear_err() {
  err_.Clear();
}
inline ::Err* UAcommands::mutable_err(int index) {
  // @@protoc_insertion_point(field_mutable:UAcommands.err)
  return err_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
UAcommands::mutable_err() {
  // @@protoc_insertion_point(field_mutable_list:UAcommands.err)
  return &err_;
}
inline const ::Err& UAcommands::_internal_err(int index) const {
  return err_.Get(index);
}
inline const ::Err& UAcommands::err(int index) const {
  // @@protoc_insertion_point(field_get:UAcommands.err)
  return _internal_err(index);
}
inline ::Err* UAcommands::_internal_add_err() {
  return err_.Add();
}
inline ::Err* UAcommands::add_err() {
  ::Err* _add = _internal_add_err();
  // @@protoc_insertion_point(field_add:UAcommands.err)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
UAcommands::err() const {
  // @@protoc_insertion_point(field_list:UAcommands.err)
  return err_;
}

// optional bool disconnect = 6;
inline bool UAcommands::_internal_has_disconnect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAcommands::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void UAcommands::clear_disconnect() {
  disconnect_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool UAcommands::_internal_disconnect() const {
  return disconnect_;
}
inline bool UAcommands::disconnect() const {
  // @@protoc_insertion_point(field_get:UAcommands.disconnect)
  return _internal_disconnect();
}
inline void UAcommands::_internal_set_disconnect(bool value) {
  _has_bits_[0] |= 0x00000001u;
  disconnect_ = value;
}
inline void UAcommands::set_disconnect(bool value) {
  _internal_set_disconnect(value);
  // @@protoc_insertion_point(field_set:UAcommands.disconnect)
}

// repeated int64 acks = 7;
inline int UAcommands::_internal_acks_size() const {
  return acks_.size();
}
inline int UAcommands::acks_size() const {
  return _internal_acks_size();
}
inline void UAcommands::clear_acks() {
  acks_.Clear();
}
inline int64_t UAcommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UAcommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:UAcommands.acks)
  return _internal_acks(index);
}
inline void UAcommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UAcommands.acks)
}
inline void UAcommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UAcommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UAcommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UAcommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UAcommands::acks() const {
  // @@protoc_insertion_point(field_list:UAcommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UAcommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UAcommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UAcommands.acks)
  return _internal_mutable_acks();
}

// -------------------------------------------------------------------

// AUcommands

// repeated .AUreqPickup pickup = 1;
inline int AUcommands::_internal_pickup_size() const {
  return pickup_.size();
}
inline int AUcommands::pickup_size() const {
  return _internal_pickup_size();
}
inline void AUcommands::clear_pickup() {
  pickup_.Clear();
}
inline ::AUreqPickup* AUcommands::mutable_pickup(int index) {
  // @@protoc_insertion_point(field_mutable:AUcommands.pickup)
  return pickup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqPickup >*
AUcommands::mutable_pickup() {
  // @@protoc_insertion_point(field_mutable_list:AUcommands.pickup)
  return &pickup_;
}
inline const ::AUreqPickup& AUcommands::_internal_pickup(int index) const {
  return pickup_.Get(index);
}
inline const ::AUreqPickup& AUcommands::pickup(int index) const {
  // @@protoc_insertion_point(field_get:AUcommands.pickup)
  return _internal_pickup(index);
}
inline ::AUreqPickup* AUcommands::_internal_add_pickup() {
  return pickup_.Add();
}
inline ::AUreqPickup* AUcommands::add_pickup() {
  ::AUreqPickup* _add = _internal_add_pickup();
  // @@protoc_insertion_point(field_add:AUcommands.pickup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqPickup >&
AUcommands::pickup() const {
  // @@protoc_insertion_point(field_list:AUcommands.pickup)
  return pickup_;
}

// repeated .AUreqDelivery delivery = 2;
inline int AUcommands::_internal_delivery_size() const {
  return delivery_.size();
}
inline int AUcommands::delivery_size() const {
  return _internal_delivery_size();
}
inline void AUcommands::clear_delivery() {
  delivery_.Clear();
}
inline ::AUreqDelivery* AUcommands::mutable_delivery(int index) {
  // @@protoc_insertion_point(field_mutable:AUcommands.delivery)
  return delivery_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqDelivery >*
AUcommands::mutable_delivery() {
  // @@protoc_insertion_point(field_mutable_list:AUcommands.delivery)
  return &delivery_;
}
inline const ::AUreqDelivery& AUcommands::_internal_delivery(int index) const {
  return delivery_.Get(index);
}
inline const ::AUreqDelivery& AUcommands::delivery(int index) const {
  // @@protoc_insertion_point(field_get:AUcommands.delivery)
  return _internal_delivery(index);
}
inline ::AUreqDelivery* AUcommands::_internal_add_delivery() {
  return delivery_.Add();
}
inline ::AUreqDelivery* AUcommands::add_delivery() {
  ::AUreqDelivery* _add = _internal_add_delivery();
  // @@protoc_insertion_point(field_add:AUcommands.delivery)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUreqDelivery >&
AUcommands::delivery() const {
  // @@protoc_insertion_point(field_list:AUcommands.delivery)
  return delivery_;
}

// repeated .AUchangeDestn changeDest = 3;
inline int AUcommands::_internal_changedest_size() const {
  return changedest_.size();
}
inline int AUcommands::changedest_size() const {
  return _internal_changedest_size();
}
inline void AUcommands::clear_changedest() {
  changedest_.Clear();
}
inline ::AUchangeDestn* AUcommands::mutable_changedest(int index) {
  // @@protoc_insertion_point(field_mutable:AUcommands.changeDest)
  return changedest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUchangeDestn >*
AUcommands::mutable_changedest() {
  // @@protoc_insertion_point(field_mutable_list:AUcommands.changeDest)
  return &changedest_;
}
inline const ::AUchangeDestn& AUcommands::_internal_changedest(int index) const {
  return changedest_.Get(index);
}
inline const ::AUchangeDestn& AUcommands::changedest(int index) const {
  // @@protoc_insertion_point(field_get:AUcommands.changeDest)
  return _internal_changedest(index);
}
inline ::AUchangeDestn* AUcommands::_internal_add_changedest() {
  return changedest_.Add();
}
inline ::AUchangeDestn* AUcommands::add_changedest() {
  ::AUchangeDestn* _add = _internal_add_changedest();
  // @@protoc_insertion_point(field_add:AUcommands.changeDest)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUchangeDestn >&
AUcommands::changedest() const {
  // @@protoc_insertion_point(field_list:AUcommands.changeDest)
  return changedest_;
}

// repeated .AUbindUPS bindUPS = 4;
inline int AUcommands::_internal_bindups_size() const {
  return bindups_.size();
}
inline int AUcommands::bindups_size() const {
  return _internal_bindups_size();
}
inline void AUcommands::clear_bindups() {
  bindups_.Clear();
}
inline ::AUbindUPS* AUcommands::mutable_bindups(int index) {
  // @@protoc_insertion_point(field_mutable:AUcommands.bindUPS)
  return bindups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUbindUPS >*
AUcommands::mutable_bindups() {
  // @@protoc_insertion_point(field_mutable_list:AUcommands.bindUPS)
  return &bindups_;
}
inline const ::AUbindUPS& AUcommands::_internal_bindups(int index) const {
  return bindups_.Get(index);
}
inline const ::AUbindUPS& AUcommands::bindups(int index) const {
  // @@protoc_insertion_point(field_get:AUcommands.bindUPS)
  return _internal_bindups(index);
}
inline ::AUbindUPS* AUcommands::_internal_add_bindups() {
  return bindups_.Add();
}
inline ::AUbindUPS* AUcommands::add_bindups() {
  ::AUbindUPS* _add = _internal_add_bindups();
  // @@protoc_insertion_point(field_add:AUcommands.bindUPS)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUbindUPS >&
AUcommands::bindups() const {
  // @@protoc_insertion_point(field_list:AUcommands.bindUPS)
  return bindups_;
}

// repeated .Err err = 5;
inline int AUcommands::_internal_err_size() const {
  return err_.size();
}
inline int AUcommands::err_size() const {
  return _internal_err_size();
}
inline void AUcommands::clear_err() {
  err_.Clear();
}
inline ::Err* AUcommands::mutable_err(int index) {
  // @@protoc_insertion_point(field_mutable:AUcommands.err)
  return err_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
AUcommands::mutable_err() {
  // @@protoc_insertion_point(field_mutable_list:AUcommands.err)
  return &err_;
}
inline const ::Err& AUcommands::_internal_err(int index) const {
  return err_.Get(index);
}
inline const ::Err& AUcommands::err(int index) const {
  // @@protoc_insertion_point(field_get:AUcommands.err)
  return _internal_err(index);
}
inline ::Err* AUcommands::_internal_add_err() {
  return err_.Add();
}
inline ::Err* AUcommands::add_err() {
  ::Err* _add = _internal_add_err();
  // @@protoc_insertion_point(field_add:AUcommands.err)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
AUcommands::err() const {
  // @@protoc_insertion_point(field_list:AUcommands.err)
  return err_;
}

// optional bool disconnect = 6;
inline bool AUcommands::_internal_has_disconnect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUcommands::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void AUcommands::clear_disconnect() {
  disconnect_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AUcommands::_internal_disconnect() const {
  return disconnect_;
}
inline bool AUcommands::disconnect() const {
  // @@protoc_insertion_point(field_get:AUcommands.disconnect)
  return _internal_disconnect();
}
inline void AUcommands::_internal_set_disconnect(bool value) {
  _has_bits_[0] |= 0x00000001u;
  disconnect_ = value;
}
inline void AUcommands::set_disconnect(bool value) {
  _internal_set_disconnect(value);
  // @@protoc_insertion_point(field_set:AUcommands.disconnect)
}

// repeated int64 acks = 7;
inline int AUcommands::_internal_acks_size() const {
  return acks_.size();
}
inline int AUcommands::acks_size() const {
  return _internal_acks_size();
}
inline void AUcommands::clear_acks() {
  acks_.Clear();
}
inline int64_t AUcommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t AUcommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:AUcommands.acks)
  return _internal_acks(index);
}
inline void AUcommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:AUcommands.acks)
}
inline void AUcommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void AUcommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:AUcommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUcommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUcommands::acks() const {
  // @@protoc_insertion_point(field_list:AUcommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUcommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUcommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:AUcommands.acks)
  return _internal_mutable_acks();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ups_5famazon_2eproto
